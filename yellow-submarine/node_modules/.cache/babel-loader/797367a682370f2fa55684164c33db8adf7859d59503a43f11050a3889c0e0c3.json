{"ast":null,"code":"/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n    g.Matter = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function () {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = \"function\" == typeof require && require;\n            if (!f && c) return c(i, !0);\n            if (u) return u(i, !0);\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\n            throw a.code = \"MODULE_NOT_FOUND\", a;\n          }\n          var p = n[i] = {\n            exports: {}\n          };\n          e[i][0].call(p.exports, function (r) {\n            var n = e[i][1][r];\n            return o(n || r);\n          }, p, p.exports, r, e, n, t);\n        }\n        return n[i].exports;\n      }\n      for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);\n      return o;\n    }\n    return r;\n  }()({\n    1: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Body` module contains methods for creating and manipulating body models.\n      * A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n      * Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      \n      * @class Body\n      */\n\n      var Body = {};\n      module.exports = Body;\n      var Vertices = _dereq_('../geometry/Vertices');\n      var Vector = _dereq_('../geometry/Vector');\n      var Sleeping = _dereq_('../core/Sleeping');\n      var Render = _dereq_('../render/Render');\n      var Common = _dereq_('../core/Common');\n      var Bounds = _dereq_('../geometry/Bounds');\n      var Axes = _dereq_('../geometry/Axes');\n      (function () {\n        Body._inertiaScale = 4;\n        Body._nextCollidingGroupId = 1;\n        Body._nextNonCollidingGroupId = -1;\n        Body._nextCategory = 0x0001;\n\n        /**\n         * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * Vertices must be specified in clockwise order.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} options\n         * @return {body} body\n         */\n        Body.create = function (options) {\n          var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: {\n              x: 0,\n              y: 0\n            },\n            force: {\n              x: 0,\n              y: 0\n            },\n            torque: 0,\n            positionImpulse: {\n              x: 0,\n              y: 0\n            },\n            constraintImpulse: {\n              x: 0,\n              y: 0,\n              angle: 0\n            },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: {\n              x: 0,\n              y: 0\n            },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n              category: 0x0001,\n              mask: 0xFFFFFFFF,\n              group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n              visible: true,\n              opacity: 1,\n              sprite: {\n                xScale: 1,\n                yScale: 1,\n                xOffset: 0,\n                yOffset: 0\n              },\n              lineWidth: 0\n            }\n          };\n          var body = Common.extend(defaults, options);\n          _initProperties(body, options);\n          return body;\n        };\n\n        /**\n         * Returns the next unique group index for which bodies will collide.\n         * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n         * See `body.collisionFilter` for more information.\n         * @method nextGroup\n         * @param {bool} [isNonColliding=false]\n         * @return {Number} Unique group index\n         */\n        Body.nextGroup = function (isNonColliding) {\n          if (isNonColliding) return Body._nextNonCollidingGroupId--;\n          return Body._nextCollidingGroupId++;\n        };\n\n        /**\n         * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n         * There are 32 available. See `body.collisionFilter` for more information.\n         * @method nextCategory\n         * @return {Number} Unique category bitfield\n         */\n        Body.nextCategory = function () {\n          Body._nextCategory = Body._nextCategory << 1;\n          return Body._nextCategory;\n        };\n\n        /**\n         * Initialises body properties.\n         * @method _initProperties\n         * @private\n         * @param {body} body\n         * @param {} [options]\n         */\n        var _initProperties = function (body, options) {\n          options = options || {};\n\n          // init required properties (order is important)\n          Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n          });\n          Vertices.rotate(body.vertices, body.angle, body.position);\n          Axes.rotate(body.axes, body.angle);\n          Bounds.update(body.bounds, body.vertices, body.velocity);\n\n          // allow options to override the automatically calculated properties\n          Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n          });\n\n          // render properties\n          var defaultFillStyle = body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56']),\n            defaultStrokeStyle = '#000';\n          body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n          body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n          body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n          body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n        };\n\n        /**\n         * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n         * Prefer to use the actual setter functions in performance critical situations.\n         * @method set\n         * @param {body} body\n         * @param {} settings A property name (or map of properties and values) to set on the body.\n         * @param {} value The value to set if `settings` is a single property name.\n         */\n        Body.set = function (body, settings, value) {\n          var property;\n          if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n          }\n          for (property in settings) {\n            value = settings[property];\n            if (!settings.hasOwnProperty(property)) continue;\n            switch (property) {\n              case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n              case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n              case 'mass':\n                Body.setMass(body, value);\n                break;\n              case 'density':\n                Body.setDensity(body, value);\n                break;\n              case 'inertia':\n                Body.setInertia(body, value);\n                break;\n              case 'vertices':\n                Body.setVertices(body, value);\n                break;\n              case 'position':\n                Body.setPosition(body, value);\n                break;\n              case 'angle':\n                Body.setAngle(body, value);\n                break;\n              case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n              case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n              case 'parts':\n                Body.setParts(body, value);\n                break;\n              default:\n                body[property] = value;\n            }\n          }\n        };\n\n        /**\n         * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n         * @method setStatic\n         * @param {body} body\n         * @param {bool} isStatic\n         */\n        Body.setStatic = function (body, isStatic) {\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n            if (isStatic) {\n              part._original = {\n                restitution: part.restitution,\n                friction: part.friction,\n                mass: part.mass,\n                inertia: part.inertia,\n                density: part.density,\n                inverseMass: part.inverseMass,\n                inverseInertia: part.inverseInertia\n              };\n              part.restitution = 0;\n              part.friction = 1;\n              part.mass = part.inertia = part.density = Infinity;\n              part.inverseMass = part.inverseInertia = 0;\n              part.positionPrev.x = part.position.x;\n              part.positionPrev.y = part.position.y;\n              part.anglePrev = part.angle;\n              part.angularVelocity = 0;\n              part.speed = 0;\n              part.angularSpeed = 0;\n              part.motion = 0;\n            } else if (part._original) {\n              part.restitution = part._original.restitution;\n              part.friction = part._original.friction;\n              part.mass = part._original.mass;\n              part.inertia = part._original.inertia;\n              part.density = part._original.density;\n              part.inverseMass = part._original.inverseMass;\n              part.inverseInertia = part._original.inverseInertia;\n              delete part._original;\n            }\n          }\n        };\n\n        /**\n         * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n         * @method setMass\n         * @param {body} body\n         * @param {number} mass\n         */\n        Body.setMass = function (body, mass) {\n          var moment = body.inertia / (body.mass / 6);\n          body.inertia = moment * (mass / 6);\n          body.inverseInertia = 1 / body.inertia;\n          body.mass = mass;\n          body.inverseMass = 1 / body.mass;\n          body.density = body.mass / body.area;\n        };\n\n        /**\n         * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n         * @method setDensity\n         * @param {body} body\n         * @param {number} density\n         */\n        Body.setDensity = function (body, density) {\n          Body.setMass(body, density * body.area);\n          body.density = density;\n        };\n\n        /**\n         * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n         * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n         * @method setInertia\n         * @param {body} body\n         * @param {number} inertia\n         */\n        Body.setInertia = function (body, inertia) {\n          body.inertia = inertia;\n          body.inverseInertia = 1 / body.inertia;\n        };\n\n        /**\n         * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n         * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n         * They are then automatically translated to world space based on `body.position`.\n         *\n         * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n         * Vertices must form a convex hull, concave hulls are not supported.\n         *\n         * @method setVertices\n         * @param {body} body\n         * @param {vector[]} vertices\n         */\n        Body.setVertices = function (body, vertices) {\n          // change vertices\n          if (vertices[0].body === body) {\n            body.vertices = vertices;\n          } else {\n            body.vertices = Vertices.create(vertices, body);\n          }\n\n          // update properties\n          body.axes = Axes.fromVertices(body.vertices);\n          body.area = Vertices.area(body.vertices);\n          Body.setMass(body, body.density * body.area);\n\n          // orient vertices around the centre of mass at origin (0, 0)\n          var centre = Vertices.centre(body.vertices);\n          Vertices.translate(body.vertices, centre, -1);\n\n          // update inertia while vertices are at origin (0, 0)\n          Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n          // update geometry\n          Vertices.translate(body.vertices, body.position);\n          Bounds.update(body.bounds, body.vertices, body.velocity);\n        };\n\n        /**\n         * Sets the parts of the `body` and updates mass, inertia and centroid.\n         * Each part will have its parent set to `body`.\n         * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n         * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n         * @method setParts\n         * @param {body} body\n         * @param [body] parts\n         * @param {bool} [autoHull=true]\n         */\n        Body.setParts = function (body, parts, autoHull) {\n          var i;\n\n          // add all the parts, ensuring that the first part is always the parent body\n          parts = parts.slice(0);\n          body.parts.length = 0;\n          body.parts.push(body);\n          body.parent = body;\n          for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n              part.parent = body;\n              body.parts.push(part);\n            }\n          }\n          if (body.parts.length === 1) return;\n          autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n          // find the convex hull of all parts to set on the parent body\n          if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n              vertices = vertices.concat(parts[i].vertices);\n            }\n            Vertices.clockwiseSort(vertices);\n            var hull = Vertices.hull(vertices),\n              hullCentre = Vertices.centre(hull);\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n          }\n\n          // sum the properties of all compound parts of the parent body\n          var total = Body._totalProperties(body);\n          body.area = total.area;\n          body.parent = body;\n          body.position.x = total.centre.x;\n          body.position.y = total.centre.y;\n          body.positionPrev.x = total.centre.x;\n          body.positionPrev.y = total.centre.y;\n          Body.setMass(body, total.mass);\n          Body.setInertia(body, total.inertia);\n          Body.setPosition(body, total.centre);\n        };\n\n        /**\n         * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n         * @method setPosition\n         * @param {body} body\n         * @param {vector} position\n         */\n        Body.setPosition = function (body, position) {\n          var delta = Vector.sub(position, body.position);\n          body.positionPrev.x += delta.x;\n          body.positionPrev.y += delta.y;\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n        };\n\n        /**\n         * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n         * @method setAngle\n         * @param {body} body\n         * @param {number} angle\n         */\n        Body.setAngle = function (body, angle) {\n          var delta = angle - body.angle;\n          body.anglePrev += delta;\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n              Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n          }\n        };\n\n        /**\n         * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n         * @method setVelocity\n         * @param {body} body\n         * @param {vector} velocity\n         */\n        Body.setVelocity = function (body, velocity) {\n          body.positionPrev.x = body.position.x - velocity.x;\n          body.positionPrev.y = body.position.y - velocity.y;\n          body.velocity.x = velocity.x;\n          body.velocity.y = velocity.y;\n          body.speed = Vector.magnitude(body.velocity);\n        };\n\n        /**\n         * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n         * @method setAngularVelocity\n         * @param {body} body\n         * @param {number} velocity\n         */\n        Body.setAngularVelocity = function (body, velocity) {\n          body.anglePrev = body.angle - velocity;\n          body.angularVelocity = velocity;\n          body.angularSpeed = Math.abs(body.angularVelocity);\n        };\n\n        /**\n         * Moves a body by a given vector relative to its current position, without imparting any velocity.\n         * @method translate\n         * @param {body} body\n         * @param {vector} translation\n         */\n        Body.translate = function (body, translation) {\n          Body.setPosition(body, Vector.add(body.position, translation));\n        };\n\n        /**\n         * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n         * @method rotate\n         * @param {body} body\n         * @param {number} rotation\n         * @param {vector} [point]\n         */\n        Body.rotate = function (body, rotation, point) {\n          if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n          } else {\n            var cos = Math.cos(rotation),\n              sin = Math.sin(rotation),\n              dx = body.position.x - point.x,\n              dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + (dx * cos - dy * sin),\n              y: point.y + (dx * sin + dy * cos)\n            });\n            Body.setAngle(body, body.angle + rotation);\n          }\n        };\n\n        /**\n         * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n         * @method scale\n         * @param {body} body\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} [point]\n         */\n        Body.scale = function (body, scaleX, scaleY, point) {\n          var totalArea = 0,\n            totalInertia = 0;\n          point = point || body.position;\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, {\n              x: -part.position.x,\n              y: -part.position.y\n            });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, {\n              x: part.position.x,\n              y: part.position.y\n            });\n            if (i > 0) {\n              totalArea += part.area;\n              totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n\n          // handle parent body\n          if (body.parts.length > 1) {\n            body.area = totalArea;\n            if (!body.isStatic) {\n              Body.setMass(body, body.density * totalArea);\n              Body.setInertia(body, totalInertia);\n            }\n          }\n\n          // handle circles\n          if (body.circleRadius) {\n            if (scaleX === scaleY) {\n              body.circleRadius *= scaleX;\n            } else {\n              // body is no longer a circle\n              body.circleRadius = null;\n            }\n          }\n        };\n\n        /**\n         * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n         * @method update\n         * @param {body} body\n         * @param {number} deltaTime\n         * @param {number} timeScale\n         * @param {number} correction\n         */\n        Body.update = function (body, deltaTime, timeScale, correction) {\n          var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n          // from the previous step\n          var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n          // update velocity with Verlet integration\n          body.velocity.x = velocityPrevX * frictionAir * correction + body.force.x / body.mass * deltaTimeSquared;\n          body.velocity.y = velocityPrevY * frictionAir * correction + body.force.y / body.mass * deltaTimeSquared;\n          body.positionPrev.x = body.position.x;\n          body.positionPrev.y = body.position.y;\n          body.position.x += body.velocity.x;\n          body.position.y += body.velocity.y;\n\n          // update angular velocity with Verlet integration\n          body.angularVelocity = (body.angle - body.anglePrev) * frictionAir * correction + body.torque / body.inertia * deltaTimeSquared;\n          body.anglePrev = body.angle;\n          body.angle += body.angularVelocity;\n\n          // track speed and acceleration\n          body.speed = Vector.magnitude(body.velocity);\n          body.angularSpeed = Math.abs(body.angularVelocity);\n\n          // transform the body geometry\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            Vertices.translate(part.vertices, body.velocity);\n            if (i > 0) {\n              part.position.x += body.velocity.x;\n              part.position.y += body.velocity.y;\n            }\n            if (body.angularVelocity !== 0) {\n              Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n              Axes.rotate(part.axes, body.angularVelocity);\n              if (i > 0) {\n                Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n              }\n            }\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n        };\n\n        /**\n         * Applies a force to a body from a given world-space position, including resulting torque.\n         * @method applyForce\n         * @param {body} body\n         * @param {vector} position\n         * @param {vector} force\n         */\n        Body.applyForce = function (body, position, force) {\n          body.force.x += force.x;\n          body.force.y += force.y;\n          var offset = {\n            x: position.x - body.position.x,\n            y: position.y - body.position.y\n          };\n          body.torque += offset.x * force.y - offset.y * force.x;\n        };\n\n        /**\n         * Returns the sums of the properties of all compound parts of the parent body.\n         * @method _totalProperties\n         * @private\n         * @param {body} body\n         * @return {}\n         */\n        Body._totalProperties = function (body) {\n          // from equations at:\n          // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n          // http://output.to/sideway/default.asp?qno=121100087\n\n          var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: {\n              x: 0,\n              y: 0\n            }\n          };\n\n          // sum the properties of all compound parts of the parent body\n          for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n              mass = part.mass !== Infinity ? part.mass : 1;\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n          }\n          properties.centre = Vector.div(properties.centre, properties.mass);\n          return properties;\n        };\n\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when a body starts sleeping (where `this` is the body).\n        *\n        * @event sleepStart\n        * @this {body} The body that has started sleeping\n        * @param {} event An event object\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a body ends sleeping (where `this` is the body).\n        *\n        * @event sleepEnd\n        * @this {body} The body that has ended sleeping\n        * @param {} event An event object\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"body\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage bodies.\n         *\n         * @property label\n         * @type string\n         * @default \"Body\"\n         */\n\n        /**\n         * An array of bodies that make up this body. \n         * The first body in the array must always be a self reference to the current body instance.\n         * All bodies in the `parts` array together form a single rigid compound body.\n         * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n         * Parts themselves should never be added to a `World`, only the parent body should be.\n         * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n         *\n         * @property parts\n         * @type body[]\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n        /**\n         * A self reference if the body is _not_ a part of another body.\n         * Otherwise this is a reference to the body that this is a part of.\n         * See `body.parts`.\n         *\n         * @property parent\n         * @type body\n         */\n\n        /**\n         * A `Number` specifying the angle of the body, in radians.\n         *\n         * @property angle\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * An array of `Vector` objects that specify the convex hull of the rigid body.\n         * These should be provided about the origin `(0, 0)`. E.g.\n         *\n         *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n         *\n         * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n         * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n         *\n         * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n         * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n         *\n         * @property vertices\n         * @type vector[]\n         */\n\n        /**\n         * A `Vector` that specifies the current world-space position of the body.\n         *\n         * @property position\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n         *\n         * @property force\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n         *\n         * @property torque\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n         *\n         * @readOnly\n         * @property speed\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n         *\n         * @readOnly\n         * @property angularSpeed\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n         * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n         *\n         * @readOnly\n         * @property velocity\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n         * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n         *\n         * @readOnly\n         * @property angularVelocity\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n         * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n         *\n         * @property isStatic\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n         *\n         * @property isSensor\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n         * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n         *\n         * @property isSleeping\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n         * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n         *\n         * @readOnly\n         * @property motion\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n         *\n         * @property sleepThreshold\n         * @type number\n         * @default 60\n         */\n\n        /**\n         * A `Number` that defines the density of the body, that is its mass per unit area.\n         * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n         * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n         *\n         * @property density\n         * @type number\n         * @default 0.001\n         */\n\n        /**\n         * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n         * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n         *\n         * @property mass\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the inverse mass of the body (`1 / mass`).\n         * If you modify this value, you must also modify the `body.mass` property.\n         *\n         * @property inverseMass\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n         * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n         * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n         *\n         * @property inertia\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n         * If you modify this value, you must also modify the `body.inertia` property.\n         *\n         * @property inverseInertia\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n         * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n         * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n         * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n         *\n         *     Math.max(bodyA.restitution, bodyB.restitution)\n         *\n         * @property restitution\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n         * A value of `0` means that the body may slide indefinitely.\n         * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n         *\n         * The effects of the value may be non-linear. \n         * High values may be unstable depending on the body.\n         * The engine uses a Coulomb friction model including static and kinetic friction.\n         * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n         *\n         *     Math.min(bodyA.friction, bodyB.friction)\n         *\n         * @property friction\n         * @type number\n         * @default 0.1\n         */\n\n        /**\n         * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n         * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n         * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n         * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n         *\n         * @property frictionStatic\n         * @type number\n         * @default 0.5\n         */\n\n        /**\n         * A `Number` that defines the air friction of the body (air resistance). \n         * A value of `0` means the body will never slow as it moves through space.\n         * The higher the value, the faster a body slows when moving through space.\n         * The effects of the value are non-linear. \n         *\n         * @property frictionAir\n         * @type number\n         * @default 0.01\n         */\n\n        /**\n         * An `Object` that specifies the collision filtering properties of this body.\n         *\n         * Collisions between two bodies will obey the following rules:\n         * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n         *   they will always collide if the value is positive, and they will never collide\n         *   if the value is negative.\n         * - If the two bodies have different values of `collisionFilter.group` or if one\n         *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n         *\n         * Each body belongs to a collision category, given by `collisionFilter.category`. This\n         * value is used as a bit field and the category should have only one bit set, meaning that\n         * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n         * different collision categories available.\n         *\n         * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n         * the categories it collides with (the value is the bitwise AND value of all these categories).\n         *\n         * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n         * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n         * are both true.\n         *\n         * @property collisionFilter\n         * @type object\n         */\n\n        /**\n         * An Integer `Number`, that specifies the collision group this body belongs to.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.group\n         * @type object\n         * @default 0\n         */\n\n        /**\n         * A bit field that specifies the collision category this body belongs to.\n         * The category value should have only one bit set, for example `0x0001`.\n         * This means there are up to 32 unique collision categories available.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.category\n         * @type object\n         * @default 1\n         */\n\n        /**\n         * A bit mask that specifies the collision categories this body may collide with.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.mask\n         * @type object\n         * @default -1\n         */\n\n        /**\n         * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n         * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n         * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n         *\n         * @property slop\n         * @type number\n         * @default 0.05\n         */\n\n        /**\n         * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n         *\n         * @property timeScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n         *\n         * @property render\n         * @type object\n         */\n\n        /**\n         * A flag that indicates if the body should be rendered.\n         *\n         * @property render.visible\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * Sets the opacity to use when rendering.\n         *\n         * @property render.opacity\n         * @type number\n         * @default 1\n        */\n\n        /**\n         * An `Object` that defines the sprite properties to use when rendering, if any.\n         *\n         * @property render.sprite\n         * @type object\n         */\n\n        /**\n         * An `String` that defines the path to the image to use as the sprite texture, if any.\n         *\n         * @property render.sprite.texture\n         * @type string\n         */\n\n        /**\n         * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n         *\n         * @property render.sprite.xScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n         *\n         * @property render.sprite.yScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n         *\n         * @property render.sprite.xOffset\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n         *\n         * @property render.sprite.yOffset\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n         * A value of `0` means no outline will be rendered.\n         *\n         * @property render.lineWidth\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.fillStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.strokeStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * An array of unique axis vectors (edge normals) used for collision detection.\n         * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n         * They are constantly updated by `Body.update` during the simulation.\n         *\n         * @property axes\n         * @type vector[]\n         */\n\n        /**\n         * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n         *\n         * @property area\n         * @type string\n         * @default \n         */\n\n        /**\n         * A `Bounds` object that defines the AABB region for the body.\n         * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n         *\n         * @property bounds\n         * @type bounds\n         */\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../core/Sleeping\": 22,\n      \"../geometry/Axes\": 25,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29,\n      \"../render/Render\": 31\n    }],\n    2: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n      * A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n      * It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n      * Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Composite\n      */\n\n      var Composite = {};\n      module.exports = Composite;\n      var Events = _dereq_('../core/Events');\n      var Common = _dereq_('../core/Common');\n      var Bounds = _dereq_('../geometry/Bounds');\n      var Body = _dereq_('./Body');\n      (function () {\n        /**\n         * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properites section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} [options]\n         * @return {composite} A new composite\n         */\n        Composite.create = function (options) {\n          return Common.extend({\n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [],\n            constraints: [],\n            composites: [],\n            label: 'Composite',\n            plugin: {}\n          }, options);\n        };\n\n        /**\n         * Sets the composite's `isModified` flag. \n         * If `updateParents` is true, all parents will be set (default: false).\n         * If `updateChildren` is true, all children will be set (default: false).\n         * @method setModified\n         * @param {composite} composite\n         * @param {boolean} isModified\n         * @param {boolean} [updateParents=false]\n         * @param {boolean} [updateChildren=false]\n         */\n        Composite.setModified = function (composite, isModified, updateParents, updateChildren) {\n          composite.isModified = isModified;\n          if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n          }\n          if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              var childComposite = composite.composites[i];\n              Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n          }\n        };\n\n        /**\n         * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n         * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n         * @method add\n         * @param {composite} composite\n         * @param {} object\n         * @return {composite} The original composite with the objects added\n         */\n        Composite.add = function (composite, object) {\n          var objects = [].concat(object);\n          Events.trigger(composite, 'beforeAdd', {\n            object: object\n          });\n          for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n            switch (obj.type) {\n              case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                  Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                  break;\n                }\n                Composite.addBody(composite, obj);\n                break;\n              case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n              case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n              case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n            }\n          }\n          Events.trigger(composite, 'afterAdd', {\n            object: object\n          });\n          return composite;\n        };\n\n        /**\n         * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n         * Optionally searching its children recursively.\n         * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n         * @method remove\n         * @param {composite} composite\n         * @param {} object\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the objects removed\n         */\n        Composite.remove = function (composite, object, deep) {\n          var objects = [].concat(object);\n          Events.trigger(composite, 'beforeRemove', {\n            object: object\n          });\n          for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n            switch (obj.type) {\n              case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n              case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n              case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n              case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n            }\n          }\n          Events.trigger(composite, 'afterRemove', {\n            object: object\n          });\n          return composite;\n        };\n\n        /**\n         * Adds a composite to the given composite.\n         * @private\n         * @method addComposite\n         * @param {composite} compositeA\n         * @param {composite} compositeB\n         * @return {composite} The original compositeA with the objects from compositeB added\n         */\n        Composite.addComposite = function (compositeA, compositeB) {\n          compositeA.composites.push(compositeB);\n          compositeB.parent = compositeA;\n          Composite.setModified(compositeA, true, true, false);\n          return compositeA;\n        };\n\n        /**\n         * Removes a composite from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeComposite\n         * @param {composite} compositeA\n         * @param {composite} compositeB\n         * @param {boolean} [deep=false]\n         * @return {composite} The original compositeA with the composite removed\n         */\n        Composite.removeComposite = function (compositeA, compositeB, deep) {\n          var position = Common.indexOf(compositeA.composites, compositeB);\n          if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n          }\n          if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++) {\n              Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n          }\n          return compositeA;\n        };\n\n        /**\n         * Removes a composite from the given composite.\n         * @private\n         * @method removeCompositeAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the composite removed\n         */\n        Composite.removeCompositeAt = function (composite, position) {\n          composite.composites.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n\n        /**\n         * Adds a body to the given composite.\n         * @private\n         * @method addBody\n         * @param {composite} composite\n         * @param {body} body\n         * @return {composite} The original composite with the body added\n         */\n        Composite.addBody = function (composite, body) {\n          composite.bodies.push(body);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n\n        /**\n         * Removes a body from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeBody\n         * @param {composite} composite\n         * @param {body} body\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the body removed\n         */\n        Composite.removeBody = function (composite, body, deep) {\n          var position = Common.indexOf(composite.bodies, body);\n          if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n          }\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.removeBody(composite.composites[i], body, true);\n            }\n          }\n          return composite;\n        };\n\n        /**\n         * Removes a body from the given composite.\n         * @private\n         * @method removeBodyAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the body removed\n         */\n        Composite.removeBodyAt = function (composite, position) {\n          composite.bodies.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n\n        /**\n         * Adds a constraint to the given composite.\n         * @private\n         * @method addConstraint\n         * @param {composite} composite\n         * @param {constraint} constraint\n         * @return {composite} The original composite with the constraint added\n         */\n        Composite.addConstraint = function (composite, constraint) {\n          composite.constraints.push(constraint);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n\n        /**\n         * Removes a constraint from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeConstraint\n         * @param {composite} composite\n         * @param {constraint} constraint\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the constraint removed\n         */\n        Composite.removeConstraint = function (composite, constraint, deep) {\n          var position = Common.indexOf(composite.constraints, constraint);\n          if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n          }\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n          }\n          return composite;\n        };\n\n        /**\n         * Removes a body from the given composite.\n         * @private\n         * @method removeConstraintAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the constraint removed\n         */\n        Composite.removeConstraintAt = function (composite, position) {\n          composite.constraints.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n\n        /**\n         * Removes all bodies, constraints and composites from the given composite.\n         * Optionally clearing its children recursively.\n         * @method clear\n         * @param {composite} composite\n         * @param {boolean} keepStatic\n         * @param {boolean} [deep=false]\n         */\n        Composite.clear = function (composite, keepStatic, deep) {\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.clear(composite.composites[i], keepStatic, true);\n            }\n          }\n          if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function (body) {\n              return body.isStatic;\n            });\n          } else {\n            composite.bodies.length = 0;\n          }\n          composite.constraints.length = 0;\n          composite.composites.length = 0;\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n\n        /**\n         * Returns all bodies in the given composite, including all bodies in its children, recursively.\n         * @method allBodies\n         * @param {composite} composite\n         * @return {body[]} All the bodies\n         */\n        Composite.allBodies = function (composite) {\n          var bodies = [].concat(composite.bodies);\n          for (var i = 0; i < composite.composites.length; i++) bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n          return bodies;\n        };\n\n        /**\n         * Returns all constraints in the given composite, including all constraints in its children, recursively.\n         * @method allConstraints\n         * @param {composite} composite\n         * @return {constraint[]} All the constraints\n         */\n        Composite.allConstraints = function (composite) {\n          var constraints = [].concat(composite.constraints);\n          for (var i = 0; i < composite.composites.length; i++) constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n          return constraints;\n        };\n\n        /**\n         * Returns all composites in the given composite, including all composites in its children, recursively.\n         * @method allComposites\n         * @param {composite} composite\n         * @return {composite[]} All the composites\n         */\n        Composite.allComposites = function (composite) {\n          var composites = [].concat(composite.composites);\n          for (var i = 0; i < composite.composites.length; i++) composites = composites.concat(Composite.allComposites(composite.composites[i]));\n          return composites;\n        };\n\n        /**\n         * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n         * @method get\n         * @param {composite} composite\n         * @param {number} id\n         * @param {string} type\n         * @return {object} The requested object, if found\n         */\n        Composite.get = function (composite, id, type) {\n          var objects, object;\n          switch (type) {\n            case 'body':\n              objects = Composite.allBodies(composite);\n              break;\n            case 'constraint':\n              objects = Composite.allConstraints(composite);\n              break;\n            case 'composite':\n              objects = Composite.allComposites(composite).concat(composite);\n              break;\n          }\n          if (!objects) return null;\n          object = objects.filter(function (object) {\n            return object.id.toString() === id.toString();\n          });\n          return object.length === 0 ? null : object[0];\n        };\n\n        /**\n         * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n         * @method move\n         * @param {compositeA} compositeA\n         * @param {object[]} objects\n         * @param {compositeB} compositeB\n         * @return {composite} Returns compositeA\n         */\n        Composite.move = function (compositeA, objects, compositeB) {\n          Composite.remove(compositeA, objects);\n          Composite.add(compositeB, objects);\n          return compositeA;\n        };\n\n        /**\n         * Assigns new ids for all objects in the composite, recursively.\n         * @method rebase\n         * @param {composite} composite\n         * @return {composite} Returns composite\n         */\n        Composite.rebase = function (composite) {\n          var objects = Composite.allBodies(composite).concat(Composite.allConstraints(composite)).concat(Composite.allComposites(composite));\n          for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n          }\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n\n        /**\n         * Translates all children in the composite by a given vector relative to their current positions, \n         * without imparting any velocity.\n         * @method translate\n         * @param {composite} composite\n         * @param {vector} translation\n         * @param {bool} [recursive=true]\n         */\n        Composite.translate = function (composite, translation, recursive) {\n          var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n          for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n          }\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n\n        /**\n         * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n         * @method rotate\n         * @param {composite} composite\n         * @param {number} rotation\n         * @param {vector} point\n         * @param {bool} [recursive=true]\n         */\n        Composite.rotate = function (composite, rotation, point, recursive) {\n          var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n              dx = body.position.x - point.x,\n              dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + (dx * cos - dy * sin),\n              y: point.y + (dx * sin + dy * cos)\n            });\n            Body.rotate(body, rotation);\n          }\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n\n        /**\n         * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n         * @method scale\n         * @param {composite} composite\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} point\n         * @param {bool} [recursive=true]\n         */\n        Composite.scale = function (composite, scaleX, scaleY, point, recursive) {\n          var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n              dx = body.position.x - point.x,\n              dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + dx * scaleX,\n              y: point.y + dy * scaleY\n            });\n            Body.scale(body, scaleX, scaleY);\n          }\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n\n        /**\n         * Returns the union of the bounds of all of the composite's bodies.\n         * @method bounds\n         * @param {composite} composite The composite.\n         * @returns {bounds} The composite bounds.\n         */\n        Composite.bounds = function (composite) {\n          var bodies = Composite.allBodies(composite),\n            vertices = [];\n          for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n          }\n          return Bounds.create(vertices);\n        };\n\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when a call to `Composite.add` is made, before objects have been added.\n        *\n        * @event beforeAdd\n        * @param {} event An event object\n        * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.add` is made, after objects have been added.\n        *\n        * @event afterAdd\n        * @param {} event An event object\n        * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.remove` is made, before objects have been removed.\n        *\n        * @event beforeRemove\n        * @param {} event An event object\n        * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.remove` is made, after objects have been removed.\n        *\n        * @event afterRemove\n        * @param {} event An event object\n        * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"composite\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage composites.\n         *\n         * @property label\n         * @type string\n         * @default \"Composite\"\n         */\n\n        /**\n         * A flag that specifies whether the composite has been modified during the current step.\n         * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n         * If you need to change it manually, you should use the `Composite.setModified` method.\n         *\n         * @property isModified\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n         *\n         * @property parent\n         * @type composite\n         * @default null\n         */\n\n        /**\n         * An array of `Body` that are _direct_ children of this composite.\n         * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n         *\n         * @property bodies\n         * @type body[]\n         * @default []\n         */\n\n        /**\n         * An array of `Constraint` that are _direct_ children of this composite.\n         * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n         *\n         * @property constraints\n         * @type constraint[]\n         * @default []\n         */\n\n        /**\n         * An array of `Composite` that are _direct_ children of this composite.\n         * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n         *\n         * @property composites\n         * @type composite[]\n         * @default []\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../core/Events\": 16,\n      \"../geometry/Bounds\": 26,\n      \"./Body\": 1\n    }],\n    3: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.World` module contains methods for creating and manipulating the world composite.\n      * A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n      * A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n      * It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n      * There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class World\n      * @extends Composite\n      */\n\n      var World = {};\n      module.exports = World;\n      var Composite = _dereq_('./Composite');\n      var Constraint = _dereq_('../constraint/Constraint');\n      var Common = _dereq_('../core/Common');\n      (function () {\n        /**\n         * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @constructor\n         * @param {} options\n         * @return {world} A new world\n         */\n        World.create = function (options) {\n          var composite = Composite.create();\n          var defaults = {\n            label: 'World',\n            gravity: {\n              x: 0,\n              y: 1,\n              scale: 0.001\n            },\n            bounds: {\n              min: {\n                x: -Infinity,\n                y: -Infinity\n              },\n              max: {\n                x: Infinity,\n                y: Infinity\n              }\n            }\n          };\n          return Common.extend(composite, defaults, options);\n        };\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * The gravity to apply on the world.\n         *\n         * @property gravity\n         * @type object\n         */\n\n        /**\n         * The gravity x component.\n         *\n         * @property gravity.x\n         * @type object\n         * @default 0\n         */\n\n        /**\n         * The gravity y component.\n         *\n         * @property gravity.y\n         * @type object\n         * @default 1\n         */\n\n        /**\n         * The gravity scale factor.\n         *\n         * @property gravity.scale\n         * @type object\n         * @default 0.001\n         */\n\n        /**\n         * A `Bounds` object that defines the world bounds for collision detection.\n         *\n         * @property bounds\n         * @type bounds\n         * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n         */\n\n        // World is a Composite body\n        // see src/module/Outro.js for these aliases:\n\n        /**\n         * An alias for Composite.add\n         * @method add\n         * @param {world} world\n         * @param {} object\n         * @return {composite} The original world with the objects added\n         */\n\n        /**\n         * An alias for Composite.remove\n         * @method remove\n         * @param {world} world\n         * @param {} object\n         * @param {boolean} [deep=false]\n         * @return {composite} The original world with the objects removed\n         */\n\n        /**\n         * An alias for Composite.clear\n         * @method clear\n         * @param {world} world\n         * @param {boolean} keepStatic\n         */\n\n        /**\n         * An alias for Composite.addComposite\n         * @method addComposite\n         * @param {world} world\n         * @param {composite} composite\n         * @return {world} The original world with the objects from composite added\n         */\n\n        /**\n         * An alias for Composite.addBody\n         * @method addBody\n         * @param {world} world\n         * @param {body} body\n         * @return {world} The original world with the body added\n         */\n\n        /**\n         * An alias for Composite.addConstraint\n         * @method addConstraint\n         * @param {world} world\n         * @param {constraint} constraint\n         * @return {world} The original world with the constraint added\n         */\n      })();\n    }, {\n      \"../constraint/Constraint\": 12,\n      \"../core/Common\": 14,\n      \"./Composite\": 2\n    }],\n    4: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n      *\n      * @class Contact\n      */\n\n      var Contact = {};\n      module.exports = Contact;\n      (function () {\n        /**\n         * Creates a new contact.\n         * @method create\n         * @param {vertex} vertex\n         * @return {contact} A new contact\n         */\n        Contact.create = function (vertex) {\n          return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n          };\n        };\n\n        /**\n         * Generates a contact id.\n         * @method id\n         * @param {vertex} vertex\n         * @return {string} Unique contactID\n         */\n        Contact.id = function (vertex) {\n          return vertex.body.id + '_' + vertex.index;\n        };\n      })();\n    }, {}],\n    5: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n      *\n      * @class Detector\n      */\n\n      // TODO: speculative contacts\n\n      var Detector = {};\n      module.exports = Detector;\n      var SAT = _dereq_('./SAT');\n      var Pair = _dereq_('./Pair');\n      var Bounds = _dereq_('../geometry/Bounds');\n      (function () {\n        /**\n         * Finds all collisions given a list of pairs.\n         * @method collisions\n         * @param {pair[]} broadphasePairs\n         * @param {engine} engine\n         * @return {array} collisions\n         */\n        Detector.collisions = function (broadphasePairs, engine) {\n          var collisions = [],\n            pairsTable = engine.pairs.table;\n          for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0],\n              bodyB = broadphasePairs[i][1];\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping)) continue;\n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) continue;\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n              for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                var partA = bodyA.parts[j];\n                for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                  var partB = bodyB.parts[k];\n                  if (partA === bodyA && partB === bodyB || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                    // find a previous collision we could reuse\n                    var pairId = Pair.id(partA, partB),\n                      pair = pairsTable[pairId],\n                      previousCollision;\n                    if (pair && pair.isActive) {\n                      previousCollision = pair.collision;\n                    } else {\n                      previousCollision = null;\n                    }\n\n                    // narrow phase\n                    var collision = SAT.collides(partA, partB, previousCollision);\n                    if (collision.collided) {\n                      collisions.push(collision);\n                    }\n                  }\n                }\n              }\n            }\n          }\n          return collisions;\n        };\n\n        /**\n         * Returns `true` if both supplied collision filters will allow a collision to occur.\n         * See `body.collisionFilter` for more information.\n         * @method canCollide\n         * @param {} filterA\n         * @param {} filterB\n         * @return {bool} `true` if collision can occur\n         */\n        Detector.canCollide = function (filterA, filterB) {\n          if (filterA.group === filterB.group && filterA.group !== 0) return filterA.group > 0;\n          return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n        };\n      })();\n    }, {\n      \"../geometry/Bounds\": 26,\n      \"./Pair\": 7,\n      \"./SAT\": 11\n    }],\n    6: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n      *\n      * @class Grid\n      */\n\n      var Grid = {};\n      module.exports = Grid;\n      var Pair = _dereq_('./Pair');\n      var Detector = _dereq_('./Detector');\n      var Common = _dereq_('../core/Common');\n      (function () {\n        /**\n         * Creates a new grid.\n         * @method create\n         * @param {} options\n         * @return {grid} A new grid\n         */\n        Grid.create = function (options) {\n          var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n          };\n          return Common.extend(defaults, options);\n        };\n\n        /**\n         * The width of a single grid bucket.\n         *\n         * @property bucketWidth\n         * @type number\n         * @default 48\n         */\n\n        /**\n         * The height of a single grid bucket.\n         *\n         * @property bucketHeight\n         * @type number\n         * @default 48\n         */\n\n        /**\n         * Updates the grid.\n         * @method update\n         * @param {grid} grid\n         * @param {body[]} bodies\n         * @param {engine} engine\n         * @param {boolean} forceUpdate\n         */\n        Grid.update = function (grid, bodies, engine, forceUpdate) {\n          var i,\n            col,\n            row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n          for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isSleeping && !forceUpdate) continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y) continue;\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n              if (!body.region || forceUpdate) body.region = newRegion;\n              var union = Grid._regionUnion(newRegion, body.region);\n\n              // update grid buckets affected by region change\n              // iterate over the union of both regions\n              for (col = union.startCol; col <= union.endCol; col++) {\n                for (row = union.startRow; row <= union.endRow; row++) {\n                  bucketId = Grid._getBucketId(col, row);\n                  bucket = buckets[bucketId];\n                  var isInsideNewRegion = col >= newRegion.startCol && col <= newRegion.endCol && row >= newRegion.startRow && row <= newRegion.endRow;\n                  var isInsideOldRegion = col >= body.region.startCol && col <= body.region.endCol && row >= body.region.startRow && row <= body.region.endRow;\n\n                  // remove from old region buckets\n                  if (!isInsideNewRegion && isInsideOldRegion) {\n                    if (isInsideOldRegion) {\n                      if (bucket) Grid._bucketRemoveBody(grid, bucket, body);\n                    }\n                  }\n\n                  // add to new region buckets\n                  if (body.region === newRegion || isInsideNewRegion && !isInsideOldRegion || forceUpdate) {\n                    if (!bucket) bucket = Grid._createBucket(buckets, bucketId);\n                    Grid._bucketAddBody(grid, bucket, body);\n                  }\n                }\n              }\n\n              // set the new region\n              body.region = newRegion;\n\n              // flag changes so we can update pairs\n              gridChanged = true;\n            }\n          }\n\n          // update pairs list only if pairs changed (i.e. a body changed region)\n          if (gridChanged) grid.pairsList = Grid._createActivePairsList(grid);\n        };\n\n        /**\n         * Clears the grid.\n         * @method clear\n         * @param {grid} grid\n         */\n        Grid.clear = function (grid) {\n          grid.buckets = {};\n          grid.pairs = {};\n          grid.pairsList = [];\n        };\n\n        /**\n         * Finds the union of two regions.\n         * @method _regionUnion\n         * @private\n         * @param {} regionA\n         * @param {} regionB\n         * @return {} region\n         */\n        Grid._regionUnion = function (regionA, regionB) {\n          var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n          return Grid._createRegion(startCol, endCol, startRow, endRow);\n        };\n\n        /**\n         * Gets the region a given body falls in for a given grid.\n         * @method _getRegion\n         * @private\n         * @param {} grid\n         * @param {} body\n         * @return {} region\n         */\n        Grid._getRegion = function (grid, body) {\n          var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n          return Grid._createRegion(startCol, endCol, startRow, endRow);\n        };\n\n        /**\n         * Creates a region.\n         * @method _createRegion\n         * @private\n         * @param {} startCol\n         * @param {} endCol\n         * @param {} startRow\n         * @param {} endRow\n         * @return {} region\n         */\n        Grid._createRegion = function (startCol, endCol, startRow, endRow) {\n          return {\n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol,\n            endCol: endCol,\n            startRow: startRow,\n            endRow: endRow\n          };\n        };\n\n        /**\n         * Gets the bucket id at the given position.\n         * @method _getBucketId\n         * @private\n         * @param {} column\n         * @param {} row\n         * @return {string} bucket id\n         */\n        Grid._getBucketId = function (column, row) {\n          return 'C' + column + 'R' + row;\n        };\n\n        /**\n         * Creates a bucket.\n         * @method _createBucket\n         * @private\n         * @param {} buckets\n         * @param {} bucketId\n         * @return {} bucket\n         */\n        Grid._createBucket = function (buckets, bucketId) {\n          var bucket = buckets[bucketId] = [];\n          return bucket;\n        };\n\n        /**\n         * Adds a body to a bucket.\n         * @method _bucketAddBody\n         * @private\n         * @param {} grid\n         * @param {} bucket\n         * @param {} body\n         */\n        Grid._bucketAddBody = function (grid, bucket, body) {\n          // add new pairs\n          for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n            if (body.id === bodyB.id || body.isStatic && bodyB.isStatic) continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n              pair = grid.pairs[pairId];\n            if (pair) {\n              pair[2] += 1;\n            } else {\n              grid.pairs[pairId] = [body, bodyB, 1];\n            }\n          }\n\n          // add to bodies (after pairs, otherwise pairs with self)\n          bucket.push(body);\n        };\n\n        /**\n         * Removes a body from a bucket.\n         * @method _bucketRemoveBody\n         * @private\n         * @param {} grid\n         * @param {} bucket\n         * @param {} body\n         */\n        Grid._bucketRemoveBody = function (grid, bucket, body) {\n          // remove from bucket\n          bucket.splice(Common.indexOf(bucket, body), 1);\n\n          // update pair counts\n          for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n              pairId = Pair.id(body, bodyB),\n              pair = grid.pairs[pairId];\n            if (pair) pair[2] -= 1;\n          }\n        };\n\n        /**\n         * Generates a list of the active pairs in the grid.\n         * @method _createActivePairsList\n         * @private\n         * @param {} grid\n         * @return [] pairs\n         */\n        Grid._createActivePairsList = function (grid) {\n          var pairKeys,\n            pair,\n            pairs = [];\n\n          // grid.pairs is used as a hashmap\n          pairKeys = Common.keys(grid.pairs);\n\n          // iterate over grid.pairs\n          for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n              pairs.push(pair);\n            } else {\n              delete grid.pairs[pairKeys[k]];\n            }\n          }\n          return pairs;\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"./Detector\": 5,\n      \"./Pair\": 7\n    }],\n    7: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n      *\n      * @class Pair\n      */\n\n      var Pair = {};\n      module.exports = Pair;\n      var Contact = _dereq_('./Contact');\n      (function () {\n        /**\n         * Creates a pair.\n         * @method create\n         * @param {collision} collision\n         * @param {number} timestamp\n         * @return {pair} A new pair\n         */\n        Pair.create = function (collision, timestamp) {\n          var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n          var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n          };\n          Pair.update(pair, collision, timestamp);\n          return pair;\n        };\n\n        /**\n         * Updates a pair given a collision.\n         * @method update\n         * @param {pair} pair\n         * @param {collision} collision\n         * @param {number} timestamp\n         */\n        Pair.update = function (pair, collision, timestamp) {\n          var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n          pair.collision = collision;\n          pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n          pair.friction = Math.min(parentA.friction, parentB.friction);\n          pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n          pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n          pair.slop = Math.max(parentA.slop, parentB.slop);\n          activeContacts.length = 0;\n          if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n              var support = supports[i],\n                contactId = Contact.id(support),\n                contact = contacts[contactId];\n              if (contact) {\n                activeContacts.push(contact);\n              } else {\n                activeContacts.push(contacts[contactId] = Contact.create(support));\n              }\n            }\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n          } else {\n            if (pair.isActive === true) Pair.setActive(pair, false, timestamp);\n          }\n        };\n\n        /**\n         * Set a pair as active or inactive.\n         * @method setActive\n         * @param {pair} pair\n         * @param {bool} isActive\n         * @param {number} timestamp\n         */\n        Pair.setActive = function (pair, isActive, timestamp) {\n          if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n          } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n          }\n        };\n\n        /**\n         * Get the id for the given pair.\n         * @method id\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @return {string} Unique pairId\n         */\n        Pair.id = function (bodyA, bodyB) {\n          if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n          } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n          }\n        };\n      })();\n    }, {\n      \"./Contact\": 4\n    }],\n    8: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n      *\n      * @class Pairs\n      */\n\n      var Pairs = {};\n      module.exports = Pairs;\n      var Pair = _dereq_('./Pair');\n      var Common = _dereq_('../core/Common');\n      (function () {\n        Pairs._pairMaxIdleLife = 1000;\n\n        /**\n         * Creates a new pairs structure.\n         * @method create\n         * @param {object} options\n         * @return {pairs} A new pairs structure\n         */\n        Pairs.create = function (options) {\n          return Common.extend({\n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n          }, options);\n        };\n\n        /**\n         * Updates pairs given a list of collisions.\n         * @method update\n         * @param {object} pairs\n         * @param {collision[]} collisions\n         * @param {number} timestamp\n         */\n        Pairs.update = function (pairs, collisions, timestamp) {\n          var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n          // clear collision state arrays, but maintain old reference\n          collisionStart.length = 0;\n          collisionEnd.length = 0;\n          collisionActive.length = 0;\n          for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n            if (collision.collided) {\n              pairId = Pair.id(collision.bodyA, collision.bodyB);\n              activePairIds.push(pairId);\n              pair = pairsTable[pairId];\n              if (pair) {\n                // pair already exists (but may or may not be active)\n                if (pair.isActive) {\n                  // pair exists and is active\n                  collisionActive.push(pair);\n                } else {\n                  // pair exists but was inactive, so a collision has just started again\n                  collisionStart.push(pair);\n                }\n\n                // update the pair\n                Pair.update(pair, collision, timestamp);\n              } else {\n                // pair did not exist, create a new pair\n                pair = Pair.create(collision, timestamp);\n                pairsTable[pairId] = pair;\n\n                // push the new pair\n                collisionStart.push(pair);\n                pairsList.push(pair);\n              }\n            }\n          }\n\n          // deactivate previously active pairs that are now inactive\n          for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n              Pair.setActive(pair, false, timestamp);\n              collisionEnd.push(pair);\n            }\n          }\n        };\n\n        /**\n         * Finds and removes pairs that have been inactive for a set amount of time.\n         * @method removeOld\n         * @param {object} pairs\n         * @param {number} timestamp\n         */\n        Pairs.removeOld = function (pairs, timestamp) {\n          var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n          for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n\n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n              pair.timeUpdated = timestamp;\n              continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n              indexesToRemove.push(i);\n            }\n          }\n\n          // remove marked pairs\n          for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n          }\n        };\n\n        /**\n         * Clears the given pairs structure.\n         * @method clear\n         * @param {pairs} pairs\n         * @return {pairs} pairs\n         */\n        Pairs.clear = function (pairs) {\n          pairs.table = {};\n          pairs.list.length = 0;\n          pairs.collisionStart.length = 0;\n          pairs.collisionActive.length = 0;\n          pairs.collisionEnd.length = 0;\n          return pairs;\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"./Pair\": 7\n    }],\n    9: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Query` module contains methods for performing collision queries.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Query\n      */\n\n      var Query = {};\n      module.exports = Query;\n      var Vector = _dereq_('../geometry/Vector');\n      var SAT = _dereq_('./SAT');\n      var Bounds = _dereq_('../geometry/Bounds');\n      var Bodies = _dereq_('../factory/Bodies');\n      var Vertices = _dereq_('../geometry/Vertices');\n      (function () {\n        /**\n         * Returns a list of collisions between `body` and `bodies`.\n         * @method collides\n         * @param {body} body\n         * @param {body[]} bodies\n         * @return {object[]} Collisions\n         */\n        Query.collides = function (body, bodies) {\n          var collisions = [];\n          for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n              for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                var part = bodyA.parts[j];\n                if (Bounds.overlaps(part.bounds, body.bounds)) {\n                  var collision = SAT.collides(part, body);\n                  if (collision.collided) {\n                    collisions.push(collision);\n                    break;\n                  }\n                }\n              }\n            }\n          }\n          return collisions;\n        };\n\n        /**\n         * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n         * @method ray\n         * @param {body[]} bodies\n         * @param {vector} startPoint\n         * @param {vector} endPoint\n         * @param {number} [rayWidth]\n         * @return {object[]} Collisions\n         */\n        Query.ray = function (bodies, startPoint, endPoint, rayWidth) {\n          rayWidth = rayWidth || 1e-100;\n          var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, {\n              angle: rayAngle\n            }),\n            collisions = Query.collides(ray, bodies);\n          for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;\n          }\n          return collisions;\n        };\n\n        /**\n         * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n         * @method region\n         * @param {body[]} bodies\n         * @param {bounds} bounds\n         * @param {bool} [outside=false]\n         * @return {body[]} The bodies matching the query\n         */\n        Query.region = function (bodies, bounds, outside) {\n          var result = [];\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n              overlaps = Bounds.overlaps(body.bounds, bounds);\n            if (overlaps && !outside || !overlaps && outside) result.push(body);\n          }\n          return result;\n        };\n\n        /**\n         * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n         * @method point\n         * @param {body[]} bodies\n         * @param {vector} point\n         * @return {body[]} The bodies matching the query\n         */\n        Query.point = function (bodies, point) {\n          var result = [];\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (Bounds.contains(body.bounds, point)) {\n              for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                if (Bounds.contains(part.bounds, point) && Vertices.contains(part.vertices, point)) {\n                  result.push(body);\n                  break;\n                }\n              }\n            }\n          }\n          return result;\n        };\n      })();\n    }, {\n      \"../factory/Bodies\": 23,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29,\n      \"./SAT\": 11\n    }],\n    10: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Resolver` module contains methods for resolving collision pairs.\n      *\n      * @class Resolver\n      */\n\n      var Resolver = {};\n      module.exports = Resolver;\n      var Vertices = _dereq_('../geometry/Vertices');\n      var Vector = _dereq_('../geometry/Vector');\n      var Common = _dereq_('../core/Common');\n      var Bounds = _dereq_('../geometry/Bounds');\n      (function () {\n        Resolver._restingThresh = 4;\n        Resolver._restingThreshTangent = 6;\n        Resolver._positionDampen = 0.9;\n        Resolver._positionWarming = 0.8;\n        Resolver._frictionNormalMultiplier = 5;\n\n        /**\n         * Prepare pairs for position solving.\n         * @method preSolvePosition\n         * @param {pair[]} pairs\n         */\n        Resolver.preSolvePosition = function (pairs) {\n          var i, pair, activeCount;\n\n          // find total contacts on each body\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n          }\n        };\n\n        /**\n         * Find a solution for pair positions.\n         * @method solvePosition\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n        Resolver.solvePosition = function (pairs, timeScale) {\n          var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n          // find impulses required to resolve penetration\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), Vector.add(bodyA.positionImpulse, Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n            pair.separation = Vector.dot(normal, bodyBtoA);\n          }\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n            if (bodyA.isStatic || bodyB.isStatic) positionImpulse *= 2;\n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n              contactShare = Resolver._positionDampen / bodyA.totalContacts;\n              bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n              bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n              contactShare = Resolver._positionDampen / bodyB.totalContacts;\n              bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n              bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n          }\n        };\n\n        /**\n         * Apply position resolution.\n         * @method postSolvePosition\n         * @param {body[]} bodies\n         */\n        Resolver.postSolvePosition = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n              // update body geometry\n              for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                Vertices.translate(part.vertices, body.positionImpulse);\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n                part.position.x += body.positionImpulse.x;\n                part.position.y += body.positionImpulse.y;\n              }\n\n              // move the body without changing velocity\n              body.positionPrev.x += body.positionImpulse.x;\n              body.positionPrev.y += body.positionImpulse.y;\n              if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                // reset cached impulse if the body has velocity along it\n                body.positionImpulse.x = 0;\n                body.positionImpulse.y = 0;\n              } else {\n                // warm the next iteration\n                body.positionImpulse.x *= Resolver._positionWarming;\n                body.positionImpulse.y *= Resolver._positionWarming;\n              }\n            }\n          }\n        };\n\n        /**\n         * Prepare pairs for velocity solving.\n         * @method preSolveVelocity\n         * @param {pair[]} pairs\n         */\n        Resolver.preSolveVelocity = function (pairs) {\n          var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n              contact = contacts[j];\n              contactVertex = contact.vertex;\n              normalImpulse = contact.normalImpulse;\n              tangentImpulse = contact.tangentImpulse;\n              if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                // total impulse from contact\n                impulse.x = normal.x * normalImpulse + tangent.x * tangentImpulse;\n                impulse.y = normal.y * normalImpulse + tangent.y * tangentImpulse;\n\n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                  offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                  bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                  bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                  bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                }\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                  offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                  bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                  bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                  bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                }\n              }\n            }\n          }\n        };\n\n        /**\n         * Find a solution for pair velocities.\n         * @method solveVelocity\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n        Resolver.solveVelocity = function (pairs, timeScale) {\n          var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n          for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            var collision = pair.collision,\n              bodyA = collision.parentA,\n              bodyB = collision.parentB,\n              normal = collision.normal,\n              tangent = collision.tangent,\n              contacts = pair.activeContacts,\n              contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n              var contact = contacts[j],\n                contactVertex = contact.vertex,\n                offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD),\n                relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                normalVelocity = Vector.dot(normal, relativeVelocity);\n              var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                tangentSpeed = Math.abs(tangentVelocity),\n                tangentVelocityDirection = Common.sign(tangentVelocity);\n\n              // raw impulses\n              var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n              // coulomb friction\n              var tangentImpulse = tangentVelocity,\n                maxFriction = Infinity;\n              if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                maxFriction = tangentSpeed;\n                tangentImpulse = Common.clamp(pair.friction * tangentVelocityDirection * timeScaleSquared, -maxFriction, maxFriction);\n              }\n\n              // modify impulses accounting for mass, inertia and offset\n              var oAcN = Vector.cross(offsetA, normal),\n                oBcN = Vector.cross(offsetB, normal),\n                share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n              normalImpulse *= share;\n              tangentImpulse *= share;\n\n              // handle high velocity and resting collisions separately\n              if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                // high normal velocity so clear cached contact normal impulse\n                contact.normalImpulse = 0;\n              } else {\n                // solve resting collision constraints using Erin Catto's method (GDC08)\n                // impulse constraint tends to 0\n                var contactNormalImpulse = contact.normalImpulse;\n                contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                normalImpulse = contact.normalImpulse - contactNormalImpulse;\n              }\n\n              // handle high velocity and resting collisions separately\n              if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                // high tangent velocity so clear cached contact tangent impulse\n                contact.tangentImpulse = 0;\n              } else {\n                // solve resting collision constraints using Erin Catto's method (GDC08)\n                // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                var contactTangentImpulse = contact.tangentImpulse;\n                contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n              }\n\n              // total impulse from contact\n              impulse.x = normal.x * normalImpulse + tangent.x * tangentImpulse;\n              impulse.y = normal.y * normalImpulse + tangent.y * tangentImpulse;\n\n              // apply impulse from contact\n              if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n              }\n              if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n              }\n            }\n          }\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29\n    }],\n    11: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n      *\n      * @class SAT\n      */\n\n      // TODO: true circles and curves\n\n      var SAT = {};\n      module.exports = SAT;\n      var Vertices = _dereq_('../geometry/Vertices');\n      var Vector = _dereq_('../geometry/Vector');\n      (function () {\n        /**\n         * Detect collision between two bodies using the Separating Axis Theorem.\n         * @method collides\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @param {collision} previousCollision\n         * @return {collision} collision\n         */\n        SAT.collides = function (bodyA, bodyB, previousCollision) {\n          var overlapAB,\n            overlapBA,\n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n          if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n              parentB = bodyB.parent,\n              motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n          } else {\n            collision = {\n              collided: false,\n              bodyA: bodyA,\n              bodyB: bodyB\n            };\n          }\n          if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n              axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n              axes = [axisBodyA.axes[previousCollision.axisNumber]];\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n            if (minOverlap.overlap <= 0) {\n              collision.collided = false;\n              return collision;\n            }\n          } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n            if (overlapAB.overlap <= 0) {\n              collision.collided = false;\n              return collision;\n            }\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n            if (overlapBA.overlap <= 0) {\n              collision.collided = false;\n              return collision;\n            }\n            if (overlapAB.overlap < overlapBA.overlap) {\n              minOverlap = overlapAB;\n              collision.axisBody = bodyA;\n            } else {\n              minOverlap = overlapBA;\n              collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n          }\n          collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n          collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n          collision.collided = true;\n          collision.depth = minOverlap.overlap;\n          collision.parentA = collision.bodyA.parent;\n          collision.parentB = collision.bodyB.parent;\n          bodyA = collision.bodyA;\n          bodyB = collision.bodyB;\n\n          // ensure normal is facing away from bodyA\n          if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n              x: minOverlap.axis.x,\n              y: minOverlap.axis.y\n            };\n          } else {\n            collision.normal = {\n              x: -minOverlap.axis.x,\n              y: -minOverlap.axis.y\n            };\n          }\n          collision.tangent = Vector.perp(collision.normal);\n          collision.penetration = collision.penetration || {};\n          collision.penetration.x = collision.normal.x * collision.depth;\n          collision.penetration.y = collision.normal.y * collision.depth;\n\n          // find support points, there is always either exactly one or two\n          var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n          // find the supports from bodyB that are inside bodyA\n          if (Vertices.contains(bodyA.vertices, verticesB[0])) supports.push(verticesB[0]);\n          if (Vertices.contains(bodyA.vertices, verticesB[1])) supports.push(verticesB[1]);\n\n          // find the supports from bodyA that are inside bodyB\n          if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n            if (Vertices.contains(bodyB.vertices, verticesA[0])) supports.push(verticesA[0]);\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1])) supports.push(verticesA[1]);\n          }\n\n          // account for the edge case of overlapping but no vertex containment\n          if (supports.length < 1) supports = [verticesB[0]];\n          collision.supports = supports;\n          return collision;\n        };\n\n        /**\n         * Find the overlap between two sets of vertices.\n         * @method _overlapAxes\n         * @private\n         * @param {} verticesA\n         * @param {} verticesB\n         * @param {} axes\n         * @return result\n         */\n        SAT._overlapAxes = function (verticesA, verticesB, axes) {\n          var projectionA = Vector._temp[0],\n            projectionB = Vector._temp[1],\n            result = {\n              overlap: Number.MAX_VALUE\n            },\n            overlap,\n            axis;\n          for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n            if (overlap <= 0) {\n              result.overlap = overlap;\n              return result;\n            }\n            if (overlap < result.overlap) {\n              result.overlap = overlap;\n              result.axis = axis;\n              result.axisNumber = i;\n            }\n          }\n          return result;\n        };\n\n        /**\n         * Projects vertices on an axis and returns an interval.\n         * @method _projectToAxis\n         * @private\n         * @param {} projection\n         * @param {} vertices\n         * @param {} axis\n         */\n        SAT._projectToAxis = function (projection, vertices, axis) {\n          var min = Vector.dot(vertices[0], axis),\n            max = min;\n          for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n            if (dot > max) {\n              max = dot;\n            } else if (dot < min) {\n              min = dot;\n            }\n          }\n          projection.min = min;\n          projection.max = max;\n        };\n\n        /**\n         * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n         * @method _findSupports\n         * @private\n         * @param {} bodyA\n         * @param {} bodyB\n         * @param {} normal\n         * @return [vector]\n         */\n        SAT._findSupports = function (bodyA, bodyB, normal) {\n          var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n          // find closest vertex on bodyB\n          for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n            if (distance < nearestDistance) {\n              nearestDistance = distance;\n              vertexA = vertex;\n            }\n          }\n\n          // find next closest vertex using the two connected to it\n          var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n          vertex = vertices[prevIndex];\n          vertexToBody.x = vertex.x - bodyAPosition.x;\n          vertexToBody.y = vertex.y - bodyAPosition.y;\n          nearestDistance = -Vector.dot(normal, vertexToBody);\n          vertexB = vertex;\n          var nextIndex = (vertexA.index + 1) % vertices.length;\n          vertex = vertices[nextIndex];\n          vertexToBody.x = vertex.x - bodyAPosition.x;\n          vertexToBody.y = vertex.y - bodyAPosition.y;\n          distance = -Vector.dot(normal, vertexToBody);\n          if (distance < nearestDistance) {\n            vertexB = vertex;\n          }\n          return [vertexA, vertexB];\n        };\n      })();\n    }, {\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29\n    }],\n    12: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n      * Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n      * The stiffness of constraints can be modified to create springs or elastic.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Constraint\n      */\n\n      var Constraint = {};\n      module.exports = Constraint;\n      var Vertices = _dereq_('../geometry/Vertices');\n      var Vector = _dereq_('../geometry/Vector');\n      var Sleeping = _dereq_('../core/Sleeping');\n      var Bounds = _dereq_('../geometry/Bounds');\n      var Axes = _dereq_('../geometry/Axes');\n      var Common = _dereq_('../core/Common');\n      (function () {\n        Constraint._warming = 0.4;\n        Constraint._torqueDampen = 1;\n        Constraint._minLength = 0.000001;\n\n        /**\n         * Creates a new constraint.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n         * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n         * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} options\n         * @return {constraint} constraint\n         */\n        Constraint.create = function (options) {\n          var constraint = options;\n\n          // if bodies defined but no points, use body centre\n          if (constraint.bodyA && !constraint.pointA) constraint.pointA = {\n            x: 0,\n            y: 0\n          };\n          if (constraint.bodyB && !constraint.pointB) constraint.pointB = {\n            x: 0,\n            y: 0\n          };\n\n          // calculate static length using initial world space points\n          var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n          constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n          // option defaults\n          constraint.id = constraint.id || Common.nextId();\n          constraint.label = constraint.label || 'Constraint';\n          constraint.type = 'constraint';\n          constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n          constraint.damping = constraint.damping || 0;\n          constraint.angularStiffness = constraint.angularStiffness || 0;\n          constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n          constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n          constraint.plugin = {};\n\n          // render\n          var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n          };\n          if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n          } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n          }\n          constraint.render = Common.extend(render, constraint.render);\n          return constraint;\n        };\n\n        /**\n         * Prepares for solving by constraint warming.\n         * @private\n         * @method preSolveAll\n         * @param {body[]} bodies\n         */\n        Constraint.preSolveAll = function (bodies) {\n          for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n              impulse = body.constraintImpulse;\n            if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n              continue;\n            }\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n          }\n        };\n\n        /**\n         * Solves all constraints in a list of collisions.\n         * @private\n         * @method solveAll\n         * @param {constraint[]} constraints\n         * @param {number} timeScale\n         */\n        Constraint.solveAll = function (constraints, timeScale) {\n          // Solve fixed constraints first.\n          for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n              fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic,\n              fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n            if (fixedA || fixedB) {\n              Constraint.solve(constraints[i], timeScale);\n            }\n          }\n\n          // Solve free constraints last.\n          for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic;\n            fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n            if (!fixedA && !fixedB) {\n              Constraint.solve(constraints[i], timeScale);\n            }\n          }\n        };\n\n        /**\n         * Solves a distance constraint with Gauss-Siedel method.\n         * @private\n         * @method solve\n         * @param {constraint} constraint\n         * @param {number} timeScale\n         */\n        Constraint.solve = function (constraint, timeScale) {\n          var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n          if (!bodyA && !bodyB) return;\n\n          // update reference angle\n          if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n          }\n\n          // update reference angle\n          if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n          }\n          var pointAWorld = pointA,\n            pointBWorld = pointB;\n          if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n          if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n          if (!pointAWorld || !pointBWorld) return;\n          var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n          // prevent singularity\n          if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n          }\n\n          // solve distance constraint with Gauss-Siedel method\n          var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n          if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n            relativeVelocity = Vector.sub(bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero, bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero);\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n          }\n          if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n              bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n              bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = Vector.cross(pointA, force) / resistanceTotal * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n          }\n          if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n\n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n              bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n              bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = Vector.cross(pointB, force) / resistanceTotal * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n          }\n        };\n\n        /**\n         * Performs body updates required after solving constraints.\n         * @private\n         * @method postSolveAll\n         * @param {body[]} bodies\n         */\n        Constraint.postSolveAll = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n              impulse = body.constraintImpulse;\n            if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n              continue;\n            }\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n              var part = body.parts[j];\n              Vertices.translate(part.vertices, impulse);\n              if (j > 0) {\n                part.position.x += impulse.x;\n                part.position.y += impulse.y;\n              }\n              if (impulse.angle !== 0) {\n                Vertices.rotate(part.vertices, impulse.angle, body.position);\n                Axes.rotate(part.axes, impulse.angle);\n                if (j > 0) {\n                  Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                }\n              }\n              Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n          }\n        };\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"constraint\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage bodies.\n         *\n         * @property label\n         * @type string\n         * @default \"Constraint\"\n         */\n\n        /**\n         * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n         *\n         * @property render\n         * @type object\n         */\n\n        /**\n         * A flag that indicates if the constraint should be rendered.\n         *\n         * @property render.visible\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A `Number` that defines the line width to use when rendering the constraint outline.\n         * A value of `0` means no outline will be rendered.\n         *\n         * @property render.lineWidth\n         * @type number\n         * @default 2\n         */\n\n        /**\n         * A `String` that defines the stroke style to use when rendering the constraint outline.\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.strokeStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * A `String` that defines the constraint rendering type. \n         * The possible values are 'line', 'pin', 'spring'.\n         * An appropriate render type will be automatically chosen unless one is given in options.\n         *\n         * @property render.type\n         * @type string\n         * @default 'line'\n         */\n\n        /**\n         * A `Boolean` that defines if the constraint's anchor points should be rendered.\n         *\n         * @property render.anchors\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * The first possible `Body` that this constraint is attached to.\n         *\n         * @property bodyA\n         * @type body\n         * @default null\n         */\n\n        /**\n         * The second possible `Body` that this constraint is attached to.\n         *\n         * @property bodyB\n         * @type body\n         * @default null\n         */\n\n        /**\n         * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n         *\n         * @property pointA\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n         *\n         * @property pointB\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n         * A value of `1` means the constraint should be very stiff.\n         * A value of `0.2` means the constraint acts like a soft spring.\n         *\n         * @property stiffness\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that specifies the damping of the constraint, \n         * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n         * Damping will only be apparent when the constraint also has a very low `stiffness`.\n         * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n         * A value of `0` means the constraint will apply no damping.\n         *\n         * @property damping\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that specifies the target resting length of the constraint. \n         * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n         *\n         * @property length\n         * @type number\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../core/Sleeping\": 22,\n      \"../geometry/Axes\": 25,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29\n    }],\n    13: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n      * Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class MouseConstraint\n      */\n\n      var MouseConstraint = {};\n      module.exports = MouseConstraint;\n      var Vertices = _dereq_('../geometry/Vertices');\n      var Sleeping = _dereq_('../core/Sleeping');\n      var Mouse = _dereq_('../core/Mouse');\n      var Events = _dereq_('../core/Events');\n      var Detector = _dereq_('../collision/Detector');\n      var Constraint = _dereq_('./Constraint');\n      var Composite = _dereq_('../body/Composite');\n      var Common = _dereq_('../core/Common');\n      var Bounds = _dereq_('../geometry/Bounds');\n      (function () {\n        /**\n         * Creates a new mouse constraint.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {engine} engine\n         * @param {} options\n         * @return {MouseConstraint} A new MouseConstraint\n         */\n        MouseConstraint.create = function (engine, options) {\n          var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n          if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n              mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n              mouse = Mouse.create(options.element);\n            } else {\n              mouse = Mouse.create();\n              Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n          }\n          var constraint = Constraint.create({\n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: {\n              x: 0,\n              y: 0\n            },\n            length: 0.01,\n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n              strokeStyle: '#90EE90',\n              lineWidth: 3\n            }\n          });\n          var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n              category: 0x0001,\n              mask: 0xFFFFFFFF,\n              group: 0\n            }\n          };\n          var mouseConstraint = Common.extend(defaults, options);\n          Events.on(engine, 'beforeUpdate', function () {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n          });\n          return mouseConstraint;\n        };\n\n        /**\n         * Updates the given mouse constraint.\n         * @private\n         * @method update\n         * @param {MouseConstraint} mouseConstraint\n         * @param {body[]} bodies\n         */\n        MouseConstraint.update = function (mouseConstraint, bodies) {\n          var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n          if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n              for (var i = 0; i < bodies.length; i++) {\n                body = bodies[i];\n                if (Bounds.contains(body.bounds, mouse.position) && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                  for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    if (Vertices.contains(part.vertices, mouse.position)) {\n                      constraint.pointA = mouse.position;\n                      constraint.bodyB = mouseConstraint.body = body;\n                      constraint.pointB = {\n                        x: mouse.position.x - body.position.x,\n                        y: mouse.position.y - body.position.y\n                      };\n                      constraint.angleB = body.angle;\n                      Sleeping.set(body, false);\n                      Events.trigger(mouseConstraint, 'startdrag', {\n                        mouse: mouse,\n                        body: body\n                      });\n                      break;\n                    }\n                  }\n                }\n              }\n            } else {\n              Sleeping.set(constraint.bodyB, false);\n              constraint.pointA = mouse.position;\n            }\n          } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n            if (body) Events.trigger(mouseConstraint, 'enddrag', {\n              mouse: mouse,\n              body: body\n            });\n          }\n        };\n\n        /**\n         * Triggers mouse constraint events.\n         * @method _triggerEvents\n         * @private\n         * @param {mouse} mouseConstraint\n         */\n        MouseConstraint._triggerEvents = function (mouseConstraint) {\n          var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n          if (mouseEvents.mousemove) Events.trigger(mouseConstraint, 'mousemove', {\n            mouse: mouse\n          });\n          if (mouseEvents.mousedown) Events.trigger(mouseConstraint, 'mousedown', {\n            mouse: mouse\n          });\n          if (mouseEvents.mouseup) Events.trigger(mouseConstraint, 'mouseup', {\n            mouse: mouse\n          });\n\n          // reset the mouse state ready for the next step\n          Mouse.clearSourceEvents(mouse);\n        };\n\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when the mouse has moved (or a touch moves) during the last step\n        *\n        * @event mousemove\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the mouse is down (or a touch has started) during the last step\n        *\n        * @event mousedown\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the mouse is up (or a touch has ended) during the last step\n        *\n        * @event mouseup\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the user starts dragging a body\n        *\n        * @event startdrag\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {body} event.body The body being dragged\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the user ends dragging a body\n        *\n        * @event enddrag\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {body} event.body The body that has stopped being dragged\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"constraint\"\n         * @readOnly\n         */\n\n        /**\n         * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n         *\n         * @property mouse\n         * @type mouse\n         * @default mouse\n         */\n\n        /**\n         * The `Body` that is currently being moved by the user, or `null` if no body.\n         *\n         * @property body\n         * @type body\n         * @default null\n         */\n\n        /**\n         * The `Constraint` object that is used to move the body during interaction.\n         *\n         * @property constraint\n         * @type constraint\n         */\n\n        /**\n         * An `Object` that specifies the collision filter properties.\n         * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter\n         * @type object\n         */\n      })();\n    }, {\n      \"../body/Composite\": 2,\n      \"../collision/Detector\": 5,\n      \"../core/Common\": 14,\n      \"../core/Events\": 16,\n      \"../core/Mouse\": 19,\n      \"../core/Sleeping\": 22,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vertices\": 29,\n      \"./Constraint\": 12\n    }],\n    14: [function (_dereq_, module, exports) {\n      (function (global) {\n        /**\n        * The `Matter.Common` module contains utility functions that are common to all modules.\n        *\n        * @class Common\n        */\n\n        var Common = {};\n        module.exports = Common;\n        (function () {\n          Common._nextId = 0;\n          Common._seed = 0;\n          Common._nowStartTime = +new Date();\n\n          /**\n           * Extends the object in the first argument using the object in the second argument.\n           * @method extend\n           * @param {} obj\n           * @param {boolean} deep\n           * @return {} obj extended\n           */\n          Common.extend = function (obj, deep) {\n            var argsStart, args, deepClone;\n            if (typeof deep === 'boolean') {\n              argsStart = 2;\n              deepClone = deep;\n            } else {\n              argsStart = 1;\n              deepClone = true;\n            }\n            for (var i = argsStart; i < arguments.length; i++) {\n              var source = arguments[i];\n              if (source) {\n                for (var prop in source) {\n                  if (deepClone && source[prop] && source[prop].constructor === Object) {\n                    if (!obj[prop] || obj[prop].constructor === Object) {\n                      obj[prop] = obj[prop] || {};\n                      Common.extend(obj[prop], deepClone, source[prop]);\n                    } else {\n                      obj[prop] = source[prop];\n                    }\n                  } else {\n                    obj[prop] = source[prop];\n                  }\n                }\n              }\n            }\n            return obj;\n          };\n\n          /**\n           * Creates a new clone of the object, if deep is true references will also be cloned.\n           * @method clone\n           * @param {} obj\n           * @param {bool} deep\n           * @return {} obj cloned\n           */\n          Common.clone = function (obj, deep) {\n            return Common.extend({}, deep, obj);\n          };\n\n          /**\n           * Returns the list of keys for the given object.\n           * @method keys\n           * @param {} obj\n           * @return {string[]} keys\n           */\n          Common.keys = function (obj) {\n            if (Object.keys) return Object.keys(obj);\n\n            // avoid hasOwnProperty for performance\n            var keys = [];\n            for (var key in obj) keys.push(key);\n            return keys;\n          };\n\n          /**\n           * Returns the list of values for the given object.\n           * @method values\n           * @param {} obj\n           * @return {array} Array of the objects property values\n           */\n          Common.values = function (obj) {\n            var values = [];\n            if (Object.keys) {\n              var keys = Object.keys(obj);\n              for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n              }\n              return values;\n            }\n\n            // avoid hasOwnProperty for performance\n            for (var key in obj) values.push(obj[key]);\n            return values;\n          };\n\n          /**\n           * Gets a value from `base` relative to the `path` string.\n           * @method get\n           * @param {} obj The base object\n           * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n           * @param {number} [begin] Path slice begin\n           * @param {number} [end] Path slice end\n           * @return {} The object at the given path\n           */\n          Common.get = function (obj, path, begin, end) {\n            path = path.split('.').slice(begin, end);\n            for (var i = 0; i < path.length; i += 1) {\n              obj = obj[path[i]];\n            }\n            return obj;\n          };\n\n          /**\n           * Sets a value on `base` relative to the given `path` string.\n           * @method set\n           * @param {} obj The base object\n           * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n           * @param {} val The value to set\n           * @param {number} [begin] Path slice begin\n           * @param {number} [end] Path slice end\n           * @return {} Pass through `val` for chaining\n           */\n          Common.set = function (obj, path, val, begin, end) {\n            var parts = path.split('.').slice(begin, end);\n            Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n            return val;\n          };\n\n          /**\n           * Shuffles the given array in-place.\n           * The function uses a seeded random generator.\n           * @method shuffle\n           * @param {array} array\n           * @return {array} array shuffled randomly\n           */\n          Common.shuffle = function (array) {\n            for (var i = array.length - 1; i > 0; i--) {\n              var j = Math.floor(Common.random() * (i + 1));\n              var temp = array[i];\n              array[i] = array[j];\n              array[j] = temp;\n            }\n            return array;\n          };\n\n          /**\n           * Randomly chooses a value from a list with equal probability.\n           * The function uses a seeded random generator.\n           * @method choose\n           * @param {array} choices\n           * @return {object} A random choice object from the array\n           */\n          Common.choose = function (choices) {\n            return choices[Math.floor(Common.random() * choices.length)];\n          };\n\n          /**\n           * Returns true if the object is a HTMLElement, otherwise false.\n           * @method isElement\n           * @param {object} obj\n           * @return {boolean} True if the object is a HTMLElement, otherwise false\n           */\n          Common.isElement = function (obj) {\n            if (typeof HTMLElement !== 'undefined') {\n              return obj instanceof HTMLElement;\n            }\n            return !!(obj && obj.nodeType && obj.nodeName);\n          };\n\n          /**\n           * Returns true if the object is an array.\n           * @method isArray\n           * @param {object} obj\n           * @return {boolean} True if the object is an array, otherwise false\n           */\n          Common.isArray = function (obj) {\n            return Object.prototype.toString.call(obj) === '[object Array]';\n          };\n\n          /**\n           * Returns true if the object is a function.\n           * @method isFunction\n           * @param {object} obj\n           * @return {boolean} True if the object is a function, otherwise false\n           */\n          Common.isFunction = function (obj) {\n            return typeof obj === \"function\";\n          };\n\n          /**\n           * Returns true if the object is a plain object.\n           * @method isPlainObject\n           * @param {object} obj\n           * @return {boolean} True if the object is a plain object, otherwise false\n           */\n          Common.isPlainObject = function (obj) {\n            return typeof obj === 'object' && obj.constructor === Object;\n          };\n\n          /**\n           * Returns true if the object is a string.\n           * @method isString\n           * @param {object} obj\n           * @return {boolean} True if the object is a string, otherwise false\n           */\n          Common.isString = function (obj) {\n            return toString.call(obj) === '[object String]';\n          };\n\n          /**\n           * Returns the given value clamped between a minimum and maximum value.\n           * @method clamp\n           * @param {number} value\n           * @param {number} min\n           * @param {number} max\n           * @return {number} The value clamped between min and max inclusive\n           */\n          Common.clamp = function (value, min, max) {\n            if (value < min) return min;\n            if (value > max) return max;\n            return value;\n          };\n\n          /**\n           * Returns the sign of the given value.\n           * @method sign\n           * @param {number} value\n           * @return {number} -1 if negative, +1 if 0 or positive\n           */\n          Common.sign = function (value) {\n            return value < 0 ? -1 : 1;\n          };\n\n          /**\n           * Returns the current timestamp since the time origin (e.g. from page load).\n           * The result will be high-resolution including decimal places if available.\n           * @method now\n           * @return {number} the current timestamp\n           */\n          Common.now = function () {\n            if (window.performance) {\n              if (window.performance.now) {\n                return window.performance.now();\n              } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n              }\n            }\n            return new Date() - Common._nowStartTime;\n          };\n\n          /**\n           * Returns a random value between a minimum and a maximum value inclusive.\n           * The function uses a seeded random generator.\n           * @method random\n           * @param {number} min\n           * @param {number} max\n           * @return {number} A random number between min and max inclusive\n           */\n          Common.random = function (min, max) {\n            min = typeof min !== \"undefined\" ? min : 0;\n            max = typeof max !== \"undefined\" ? max : 1;\n            return min + _seededRandom() * (max - min);\n          };\n          var _seededRandom = function () {\n            // https://en.wikipedia.org/wiki/Linear_congruential_generator\n            Common._seed = (Common._seed * 9301 + 49297) % 233280;\n            return Common._seed / 233280;\n          };\n\n          /**\n           * Converts a CSS hex colour string into an integer.\n           * @method colorToNumber\n           * @param {string} colorString\n           * @return {number} An integer representing the CSS hex string\n           */\n          Common.colorToNumber = function (colorString) {\n            colorString = colorString.replace('#', '');\n            if (colorString.length == 3) {\n              colorString = colorString.charAt(0) + colorString.charAt(0) + colorString.charAt(1) + colorString.charAt(1) + colorString.charAt(2) + colorString.charAt(2);\n            }\n            return parseInt(colorString, 16);\n          };\n\n          /**\n           * The console logging level to use, where each level includes all levels above and excludes the levels below.\n           * The default level is 'debug' which shows all console messages.  \n           *\n           * Possible level values are:\n           * - 0 = None\n           * - 1 = Debug\n           * - 2 = Info\n           * - 3 = Warn\n           * - 4 = Error\n           * @property Common.logLevel\n           * @type {Number}\n           * @default 1\n           */\n          Common.logLevel = 1;\n\n          /**\n           * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n           * The message will be prefixed with 'matter-js' to make it easily identifiable.\n           * @method log\n           * @param ...objs {} The objects to log.\n           */\n          Common.log = function () {\n            if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n              console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n            }\n          };\n\n          /**\n           * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n           * The message will be prefixed with 'matter-js' to make it easily identifiable.\n           * @method info\n           * @param ...objs {} The objects to log.\n           */\n          Common.info = function () {\n            if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n              console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n            }\n          };\n\n          /**\n           * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n           * The message will be prefixed with 'matter-js' to make it easily identifiable.\n           * @method warn\n           * @param ...objs {} The objects to log.\n           */\n          Common.warn = function () {\n            if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n              console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n            }\n          };\n\n          /**\n           * Returns the next unique sequential ID.\n           * @method nextId\n           * @return {Number} Unique sequential ID\n           */\n          Common.nextId = function () {\n            return Common._nextId++;\n          };\n\n          /**\n           * A cross browser compatible indexOf implementation.\n           * @method indexOf\n           * @param {array} haystack\n           * @param {object} needle\n           * @return {number} The position of needle in haystack, otherwise -1.\n           */\n          Common.indexOf = function (haystack, needle) {\n            if (haystack.indexOf) return haystack.indexOf(needle);\n            for (var i = 0; i < haystack.length; i++) {\n              if (haystack[i] === needle) return i;\n            }\n            return -1;\n          };\n\n          /**\n           * A cross browser compatible array map implementation.\n           * @method map\n           * @param {array} list\n           * @param {function} func\n           * @return {array} Values from list transformed by func.\n           */\n          Common.map = function (list, func) {\n            if (list.map) {\n              return list.map(func);\n            }\n            var mapped = [];\n            for (var i = 0; i < list.length; i += 1) {\n              mapped.push(func(list[i]));\n            }\n            return mapped;\n          };\n\n          /**\n           * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n           * Circular dependencies are allowed.\n           * @method topologicalSort\n           * @param {object} graph\n           * @return {array} Partially ordered set of vertices in topological order.\n           */\n          Common.topologicalSort = function (graph) {\n            // https://github.com/mgechev/javascript-algorithms\n            // Copyright (c) Minko Gechev (MIT license)\n            // Modifications: tidy formatting and naming\n            var result = [],\n              visited = [],\n              temp = [];\n            for (var node in graph) {\n              if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n              }\n            }\n            return result;\n          };\n          Common._topologicalSort = function (node, visited, temp, graph, result) {\n            var neighbors = graph[node] || [];\n            temp[node] = true;\n            for (var i = 0; i < neighbors.length; i += 1) {\n              var neighbor = neighbors[i];\n              if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n              }\n              if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n              }\n            }\n            temp[node] = false;\n            visited[node] = true;\n            result.push(node);\n          };\n\n          /**\n           * Takes _n_ functions as arguments and returns a new function that calls them in order.\n           * The arguments applied when calling the new function will also be applied to every function passed.\n           * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n           * Therefore if a passed function does not return a value, the previously returned value is maintained.\n           * After all passed functions have been called the new function returns the last returned value (if any).\n           * If any of the passed functions are a chain, then the chain will be flattened.\n           * @method chain\n           * @param ...funcs {function} The functions to chain.\n           * @return {function} A new function that calls the passed functions in order.\n           */\n          Common.chain = function () {\n            var funcs = [];\n            for (var i = 0; i < arguments.length; i += 1) {\n              var func = arguments[i];\n              if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n              } else {\n                funcs.push(func);\n              }\n            }\n            var chain = function () {\n              // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n              var lastResult,\n                args = new Array(arguments.length);\n              for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n              }\n              for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n                if (typeof result !== 'undefined') {\n                  lastResult = result;\n                }\n              }\n              return lastResult;\n            };\n            chain._chained = funcs;\n            return chain;\n          };\n\n          /**\n           * Chains a function to excute before the original function on the given `path` relative to `base`.\n           * See also docs for `Common.chain`.\n           * @method chainPathBefore\n           * @param {} base The base object\n           * @param {string} path The path relative to `base`\n           * @param {function} func The function to chain before the original\n           * @return {function} The chained function that replaced the original\n           */\n          Common.chainPathBefore = function (base, path, func) {\n            return Common.set(base, path, Common.chain(func, Common.get(base, path)));\n          };\n\n          /**\n           * Chains a function to excute after the original function on the given `path` relative to `base`.\n           * See also docs for `Common.chain`.\n           * @method chainPathAfter\n           * @param {} base The base object\n           * @param {string} path The path relative to `base`\n           * @param {function} func The function to chain after the original\n           * @return {function} The chained function that replaced the original\n           */\n          Common.chainPathAfter = function (base, path, func) {\n            return Common.set(base, path, Common.chain(Common.get(base, path), func));\n          };\n\n          /**\n           * Used to require external libraries outside of the bundle.\n           * It first looks for the `globalName` on the environment's global namespace.\n           * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n           * @private\n           * @method _requireGlobal\n           * @param {string} globalName The global module name\n           * @param {string} moduleName The fallback CommonJS module name\n           * @return {} The loaded module\n           */\n          Common._requireGlobal = function (globalName, moduleName) {\n            var obj = typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null;\n            return obj || _dereq_(moduleName);\n          };\n        })();\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}],\n    15: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Engine` module contains methods for creating and manipulating engines.\n      * An engine is a controller that manages updating the simulation of the world.\n      * See `Matter.Runner` for an optional game loop utility.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Engine\n      */\n\n      var Engine = {};\n      module.exports = Engine;\n      var World = _dereq_('../body/World');\n      var Sleeping = _dereq_('./Sleeping');\n      var Resolver = _dereq_('../collision/Resolver');\n      var Render = _dereq_('../render/Render');\n      var Pairs = _dereq_('../collision/Pairs');\n      var Metrics = _dereq_('./Metrics');\n      var Grid = _dereq_('../collision/Grid');\n      var Events = _dereq_('./Events');\n      var Composite = _dereq_('../body/Composite');\n      var Constraint = _dereq_('../constraint/Constraint');\n      var Common = _dereq_('./Common');\n      var Body = _dereq_('../body/Body');\n      (function () {\n        /**\n         * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {object} [options]\n         * @return {engine} engine\n         */\n        Engine.create = function (element, options) {\n          // options may be passed as the first (and only) argument\n          options = Common.isElement(element) ? options : element;\n          element = Common.isElement(element) ? element : null;\n          options = options || {};\n          if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n          }\n          var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n              timestamp: 0,\n              timeScale: 1\n            },\n            broadphase: {\n              controller: Grid\n            }\n          };\n          var engine = Common.extend(defaults, options);\n\n          // @deprecated\n          if (element || engine.render) {\n            var renderDefaults = {\n              element: element,\n              controller: Render\n            };\n            engine.render = Common.extend(renderDefaults, engine.render);\n          }\n\n          // @deprecated\n          if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n          }\n\n          // @deprecated\n          if (engine.render) {\n            engine.render.engine = engine;\n          }\n          engine.world = options.world || World.create(engine.world);\n          engine.pairs = Pairs.create();\n          engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n          engine.metrics = engine.metrics || {\n            extended: false\n          };\n          return engine;\n        };\n\n        /**\n         * Moves the simulation forward in time by `delta` ms.\n         * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n         * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n         * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n         * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n         * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n         *\n         * Triggers `beforeUpdate` and `afterUpdate` events.\n         * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n         * @method update\n         * @param {engine} engine\n         * @param {number} [delta=16.666]\n         * @param {number} [correction=1]\n         */\n        Engine.update = function (engine, delta, correction) {\n          delta = delta || 1000 / 60;\n          correction = correction || 1;\n          var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n          // increment timestamp\n          timing.timestamp += delta * timing.timeScale;\n\n          // create an event object\n          var event = {\n            timestamp: timing.timestamp\n          };\n          Events.trigger(engine, 'beforeUpdate', event);\n\n          // get lists of all bodies and constraints, no matter what composites they are in\n          var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n          // if sleeping enabled, call the sleeping controller\n          if (engine.enableSleeping) Sleeping.update(allBodies, timing.timeScale);\n\n          // applies gravity to all bodies\n          Engine._bodiesApplyGravity(allBodies, world.gravity);\n\n          // update all body position and rotation by integration\n          Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n          // update all constraints (first pass)\n          Constraint.preSolveAll(allBodies);\n          for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n          }\n          Constraint.postSolveAll(allBodies);\n\n          // broadphase pass: find potential collision pairs\n          if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified) broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n          } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n          }\n\n          // clear all composite modified flags\n          if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n          }\n\n          // narrowphase pass: find actual collisions, then create or update collision pairs\n          var collisions = broadphase.detector(broadphasePairs, engine);\n\n          // update collision pairs\n          var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n          Pairs.update(pairs, collisions, timestamp);\n          Pairs.removeOld(pairs, timestamp);\n\n          // wake up bodies involved in collisions\n          if (engine.enableSleeping) Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n          // trigger collision events\n          if (pairs.collisionStart.length > 0) Events.trigger(engine, 'collisionStart', {\n            pairs: pairs.collisionStart\n          });\n\n          // iteratively resolve position between collisions\n          Resolver.preSolvePosition(pairs.list);\n          for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n          }\n          Resolver.postSolvePosition(allBodies);\n\n          // update all constraints (second pass)\n          Constraint.preSolveAll(allBodies);\n          for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n          }\n          Constraint.postSolveAll(allBodies);\n\n          // iteratively resolve velocity between collisions\n          Resolver.preSolveVelocity(pairs.list);\n          for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n          }\n\n          // trigger collision events\n          if (pairs.collisionActive.length > 0) Events.trigger(engine, 'collisionActive', {\n            pairs: pairs.collisionActive\n          });\n          if (pairs.collisionEnd.length > 0) Events.trigger(engine, 'collisionEnd', {\n            pairs: pairs.collisionEnd\n          });\n\n          // clear force buffers\n          Engine._bodiesClearForces(allBodies);\n          Events.trigger(engine, 'afterUpdate', event);\n          return engine;\n        };\n\n        /**\n         * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n         * @method merge\n         * @param {engine} engineA\n         * @param {engine} engineB\n         */\n        Engine.merge = function (engineA, engineB) {\n          Common.extend(engineA, engineB);\n          if (engineB.world) {\n            engineA.world = engineB.world;\n            Engine.clear(engineA);\n            var bodies = Composite.allBodies(engineA.world);\n            for (var i = 0; i < bodies.length; i++) {\n              var body = bodies[i];\n              Sleeping.set(body, false);\n              body.id = Common.nextId();\n            }\n          }\n        };\n\n        /**\n         * Clears the engine including the world, pairs and broadphase.\n         * @method clear\n         * @param {engine} engine\n         */\n        Engine.clear = function (engine) {\n          var world = engine.world;\n          Pairs.clear(engine.pairs);\n          var broadphase = engine.broadphase;\n          if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n          }\n        };\n\n        /**\n         * Zeroes the `body.force` and `body.torque` force buffers.\n         * @method _bodiesClearForces\n         * @private\n         * @param {body[]} bodies\n         */\n        Engine._bodiesClearForces = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n          }\n        };\n\n        /**\n         * Applys a mass dependant force to all given bodies.\n         * @method _bodiesApplyGravity\n         * @private\n         * @param {body[]} bodies\n         * @param {vector} gravity\n         */\n        Engine._bodiesApplyGravity = function (bodies, gravity) {\n          var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n          if (gravity.x === 0 && gravity.y === 0 || gravityScale === 0) {\n            return;\n          }\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isStatic || body.isSleeping) continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n          }\n        };\n\n        /**\n         * Applys `Body.update` to all given `bodies`.\n         * @method _bodiesUpdate\n         * @private\n         * @param {body[]} bodies\n         * @param {number} deltaTime \n         * The amount of time elapsed between updates\n         * @param {number} timeScale\n         * @param {number} correction \n         * The Verlet correction factor (deltaTime / lastDeltaTime)\n         * @param {bounds} worldBounds\n         */\n        Engine._bodiesUpdate = function (bodies, deltaTime, timeScale, correction, worldBounds) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isStatic || body.isSleeping) continue;\n            Body.update(body, deltaTime, timeScale, correction);\n          }\n        };\n\n        /**\n         * An alias for `Runner.run`, see `Matter.Runner` for more information.\n         * @method run\n         * @param {engine} engine\n         */\n\n        /**\n        * Fired just before an update\n        *\n        * @event beforeUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update and all collision events\n        *\n        * @event afterUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n        *\n        * @event collisionStart\n        * @param {} event An event object\n        * @param {} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n        *\n        * @event collisionActive\n        * @param {} event An event object\n        * @param {} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n        *\n        * @event collisionEnd\n        * @param {} event An event object\n        * @param {} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` that specifies the number of position iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         *\n         * @property positionIterations\n         * @type number\n         * @default 6\n         */\n\n        /**\n         * An integer `Number` that specifies the number of velocity iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         *\n         * @property velocityIterations\n         * @type number\n         * @default 4\n         */\n\n        /**\n         * An integer `Number` that specifies the number of constraint iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         * The default value of `2` is usually very adequate.\n         *\n         * @property constraintIterations\n         * @type number\n         * @default 2\n         */\n\n        /**\n         * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n         * Sleeping can improve stability and performance, but often at the expense of accuracy.\n         *\n         * @property enableSleeping\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * An `Object` containing properties regarding the timing systems of the engine. \n         *\n         * @property timing\n         * @type object\n         */\n\n        /**\n         * A `Number` that specifies the global scaling factor of time for all bodies.\n         * A value of `0` freezes the simulation.\n         * A value of `0.1` gives a slow-motion effect.\n         * A value of `1.2` gives a speed-up effect.\n         *\n         * @property timing.timeScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n         * It is incremented on every `Engine.update` by the given `delta` argument. \n         *\n         * @property timing.timestamp\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n         * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n         *\n         * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n         * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n         *\n         * @property render\n         * @type render\n         * @deprecated see Demo.js for an example of creating a renderer\n         * @default a Matter.Render instance\n         */\n\n        /**\n         * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n         *\n         * @property broadphase\n         * @type grid\n         * @default a Matter.Grid instance\n         */\n\n        /**\n         * A `World` composite object that will contain all simulated bodies and constraints.\n         *\n         * @property world\n         * @type world\n         * @default a Matter.World instance\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n      })();\n    }, {\n      \"../body/Body\": 1,\n      \"../body/Composite\": 2,\n      \"../body/World\": 3,\n      \"../collision/Grid\": 6,\n      \"../collision/Pairs\": 8,\n      \"../collision/Resolver\": 10,\n      \"../constraint/Constraint\": 12,\n      \"../render/Render\": 31,\n      \"./Common\": 14,\n      \"./Events\": 16,\n      \"./Metrics\": 18,\n      \"./Sleeping\": 22\n    }],\n    16: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Events` module contains methods to fire and listen to events on other objects.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Events\n      */\n\n      var Events = {};\n      module.exports = Events;\n      var Common = _dereq_('./Common');\n      (function () {\n        /**\n         * Subscribes a callback function to the given object's `eventName`.\n         * @method on\n         * @param {} object\n         * @param {string} eventNames\n         * @param {function} callback\n         */\n        Events.on = function (object, eventNames, callback) {\n          var names = eventNames.split(' '),\n            name;\n          for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n          }\n          return callback;\n        };\n\n        /**\n         * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n         * @method off\n         * @param {} object\n         * @param {string} eventNames\n         * @param {function} callback\n         */\n        Events.off = function (object, eventNames, callback) {\n          if (!eventNames) {\n            object.events = {};\n            return;\n          }\n\n          // handle Events.off(object, callback)\n          if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n          }\n          var names = eventNames.split(' ');\n          for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n              newCallbacks = [];\n            if (callback && callbacks) {\n              for (var j = 0; j < callbacks.length; j++) {\n                if (callbacks[j] !== callback) newCallbacks.push(callbacks[j]);\n              }\n            }\n            object.events[names[i]] = newCallbacks;\n          }\n        };\n\n        /**\n         * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n         * @method trigger\n         * @param {} object\n         * @param {string} eventNames\n         * @param {} event\n         */\n        Events.trigger = function (object, eventNames, event) {\n          var names, name, callbacks, eventClone;\n          if (object.events) {\n            if (!event) event = {};\n            names = eventNames.split(' ');\n            for (var i = 0; i < names.length; i++) {\n              name = names[i];\n              callbacks = object.events[name];\n              if (callbacks) {\n                eventClone = Common.clone(event, false);\n                eventClone.name = name;\n                eventClone.source = object;\n                for (var j = 0; j < callbacks.length; j++) {\n                  callbacks[j].apply(object, [eventClone]);\n                }\n              }\n            }\n          }\n        };\n      })();\n    }, {\n      \"./Common\": 14\n    }],\n    17: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n      *\n      * @class Matter\n      */\n\n      var Matter = {};\n      module.exports = Matter;\n      var Plugin = _dereq_('./Plugin');\n      var Common = _dereq_('./Common');\n      (function () {\n        /**\n         * The library name.\n         * @property name\n         * @readOnly\n         * @type {String}\n         */\n        Matter.name = 'matter-js';\n\n        /**\n         * The library version.\n         * @property version\n         * @readOnly\n         * @type {String}\n         */\n        Matter.version = '0.14.2';\n\n        /**\n         * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n         * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n         * @property uses\n         * @type {Array}\n         */\n        Matter.uses = [];\n\n        /**\n         * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n         * @property used\n         * @readOnly\n         * @type {Array}\n         */\n        Matter.used = [];\n\n        /**\n         * Installs the given plugins on the `Matter` namespace.\n         * This is a short-hand for `Plugin.use`, see it for more information.\n         * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n         * Avoid calling this function multiple times unless you intend to manually control installation order.\n         * @method use\n         * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n         */\n        Matter.use = function () {\n          Plugin.use(Matter, Array.prototype.slice.call(arguments));\n        };\n\n        /**\n         * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n         * See also docs for `Common.chain`.\n         * @method before\n         * @param {string} path The path relative to `Matter`\n         * @param {function} func The function to chain before the original\n         * @return {function} The chained function that replaced the original\n         */\n        Matter.before = function (path, func) {\n          path = path.replace(/^Matter./, '');\n          return Common.chainPathBefore(Matter, path, func);\n        };\n\n        /**\n         * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n         * See also docs for `Common.chain`.\n         * @method after\n         * @param {string} path The path relative to `Matter`\n         * @param {function} func The function to chain after the original\n         * @return {function} The chained function that replaced the original\n         */\n        Matter.after = function (path, func) {\n          path = path.replace(/^Matter./, '');\n          return Common.chainPathAfter(Matter, path, func);\n        };\n      })();\n    }, {\n      \"./Common\": 14,\n      \"./Plugin\": 20\n    }],\n    18: [function (_dereq_, module, exports) {}, {\n      \"../body/Composite\": 2,\n      \"./Common\": 14\n    }],\n    19: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n      *\n      * @class Mouse\n      */\n\n      var Mouse = {};\n      module.exports = Mouse;\n      var Common = _dereq_('../core/Common');\n      (function () {\n        /**\n         * Creates a mouse input.\n         * @method create\n         * @param {HTMLElement} element\n         * @return {mouse} A new mouse\n         */\n        Mouse.create = function (element) {\n          var mouse = {};\n          if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n          }\n          mouse.element = element || document.body;\n          mouse.absolute = {\n            x: 0,\n            y: 0\n          };\n          mouse.position = {\n            x: 0,\n            y: 0\n          };\n          mouse.mousedownPosition = {\n            x: 0,\n            y: 0\n          };\n          mouse.mouseupPosition = {\n            x: 0,\n            y: 0\n          };\n          mouse.offset = {\n            x: 0,\n            y: 0\n          };\n          mouse.scale = {\n            x: 1,\n            y: 1\n          };\n          mouse.wheelDelta = 0;\n          mouse.button = -1;\n          mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n          mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n          };\n          mouse.mousemove = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n              touches = event.changedTouches;\n            if (touches) {\n              mouse.button = 0;\n              event.preventDefault();\n            }\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n          };\n          mouse.mousedown = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n              touches = event.changedTouches;\n            if (touches) {\n              mouse.button = 0;\n              event.preventDefault();\n            } else {\n              mouse.button = event.button;\n            }\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n          };\n          mouse.mouseup = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n              touches = event.changedTouches;\n            if (touches) {\n              event.preventDefault();\n            }\n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n          };\n          mouse.mousewheel = function (event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n          };\n          Mouse.setElement(mouse, mouse.element);\n          return mouse;\n        };\n\n        /**\n         * Sets the element the mouse is bound to (and relative to).\n         * @method setElement\n         * @param {mouse} mouse\n         * @param {HTMLElement} element\n         */\n        Mouse.setElement = function (mouse, element) {\n          mouse.element = element;\n          element.addEventListener('mousemove', mouse.mousemove);\n          element.addEventListener('mousedown', mouse.mousedown);\n          element.addEventListener('mouseup', mouse.mouseup);\n          element.addEventListener('mousewheel', mouse.mousewheel);\n          element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n          element.addEventListener('touchmove', mouse.mousemove);\n          element.addEventListener('touchstart', mouse.mousedown);\n          element.addEventListener('touchend', mouse.mouseup);\n        };\n\n        /**\n         * Clears all captured source events.\n         * @method clearSourceEvents\n         * @param {mouse} mouse\n         */\n        Mouse.clearSourceEvents = function (mouse) {\n          mouse.sourceEvents.mousemove = null;\n          mouse.sourceEvents.mousedown = null;\n          mouse.sourceEvents.mouseup = null;\n          mouse.sourceEvents.mousewheel = null;\n          mouse.wheelDelta = 0;\n        };\n\n        /**\n         * Sets the mouse position offset.\n         * @method setOffset\n         * @param {mouse} mouse\n         * @param {vector} offset\n         */\n        Mouse.setOffset = function (mouse, offset) {\n          mouse.offset.x = offset.x;\n          mouse.offset.y = offset.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n        };\n\n        /**\n         * Sets the mouse position scale.\n         * @method setScale\n         * @param {mouse} mouse\n         * @param {vector} scale\n         */\n        Mouse.setScale = function (mouse, scale) {\n          mouse.scale.x = scale.x;\n          mouse.scale.y = scale.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n        };\n\n        /**\n         * Gets the mouse position relative to an element given a screen pixel ratio.\n         * @method _getRelativeMousePosition\n         * @private\n         * @param {} event\n         * @param {} element\n         * @param {number} pixelRatio\n         * @return {}\n         */\n        Mouse._getRelativeMousePosition = function (event, element, pixelRatio) {\n          var elementBounds = element.getBoundingClientRect(),\n            rootNode = document.documentElement || document.body.parentNode || document.body,\n            scrollX = window.pageXOffset !== undefined ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = window.pageYOffset !== undefined ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x,\n            y;\n          if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n          } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n          }\n          return {\n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n          };\n        };\n      })();\n    }, {\n      \"../core/Common\": 14\n    }],\n    20: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n      *\n      * @class Plugin\n      */\n\n      var Plugin = {};\n      module.exports = Plugin;\n      var Common = _dereq_('./Common');\n      (function () {\n        Plugin._registry = {};\n\n        /**\n         * Registers a plugin object so it can be resolved later by name.\n         * @method register\n         * @param plugin {} The plugin to register.\n         * @return {object} The plugin.\n         */\n        Plugin.register = function (plugin) {\n          if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n          }\n          if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n              pluginVersion = Plugin.versionParse(plugin.version).number,\n              registeredVersion = Plugin.versionParse(registered.version).number;\n            if (pluginVersion > registeredVersion) {\n              Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n              Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n              Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n              Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n          } else {\n            Plugin._registry[plugin.name] = plugin;\n          }\n          return plugin;\n        };\n\n        /**\n         * Resolves a dependency to a plugin object from the registry if it exists. \n         * The `dependency` may contain a version, but only the name matters when resolving.\n         * @method resolve\n         * @param dependency {string} The dependency.\n         * @return {object} The plugin if resolved, otherwise `undefined`.\n         */\n        Plugin.resolve = function (dependency) {\n          return Plugin._registry[Plugin.dependencyParse(dependency).name];\n        };\n\n        /**\n         * Returns a pretty printed plugin name and version.\n         * @method toString\n         * @param plugin {} The plugin.\n         * @return {string} Pretty printed plugin name and version.\n         */\n        Plugin.toString = function (plugin) {\n          return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n        };\n\n        /**\n         * Returns `true` if the object meets the minimum standard to be considered a plugin.\n         * This means it must define the following properties:\n         * - `name`\n         * - `version`\n         * - `install`\n         * @method isPlugin\n         * @param obj {} The obj to test.\n         * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n         */\n        Plugin.isPlugin = function (obj) {\n          return obj && obj.name && obj.version && obj.install;\n        };\n\n        /**\n         * Returns `true` if a plugin with the given `name` been installed on `module`.\n         * @method isUsed\n         * @param module {} The module.\n         * @param name {string} The plugin name.\n         * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n         */\n        Plugin.isUsed = function (module, name) {\n          return module.used.indexOf(name) > -1;\n        };\n\n        /**\n         * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n         * If `plugin.for` is not specified then it is assumed to be applicable.\n         * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n         * @method isFor\n         * @param plugin {} The plugin.\n         * @param module {} The module.\n         * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n         */\n        Plugin.isFor = function (plugin, module) {\n          var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n          return !plugin.for || module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range);\n        };\n\n        /**\n         * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n         * For installing plugins on `Matter` see the convenience function `Matter.use`.\n         * Plugins may be specified either by their name or a reference to the plugin object.\n         * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n         * Order is important, a topological sort is performed to find the best resulting order of installation.\n         * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n         * This function logs the resulting status of each dependency in the console, along with any warnings.\n         * - A green tick ✅ indicates a dependency was resolved and installed.\n         * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n         * - A red cross ❌ indicates a dependency could not be resolved.\n         * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n         * @method use\n         * @param module {} The module install plugins on.\n         * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n         */\n        Plugin.use = function (module, plugins) {\n          module.uses = (module.uses || []).concat(plugins || []);\n          if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n          }\n          var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n          for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n              continue;\n            }\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n            if (!plugin) {\n              status.push('❌ ' + sortedDependencies[i]);\n              continue;\n            }\n            if (Plugin.isUsed(module, plugin.name)) {\n              continue;\n            }\n            if (!Plugin.isFor(plugin, module)) {\n              Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n              plugin._warned = true;\n            }\n            if (plugin.install) {\n              plugin.install(module);\n            } else {\n              Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n              plugin._warned = true;\n            }\n            if (plugin._warned) {\n              status.push('🔶 ' + Plugin.toString(plugin));\n              delete plugin._warned;\n            } else {\n              status.push('✅ ' + Plugin.toString(plugin));\n            }\n            module.used.push(plugin.name);\n          }\n          if (status.length > 0) {\n            Common.info(status.join('  '));\n          }\n        };\n\n        /**\n         * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n         * @method dependencies\n         * @param module {} The module.\n         * @return {object} A dependency graph.\n         */\n        Plugin.dependencies = function (module, tracked) {\n          var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n          tracked = tracked || {};\n          if (name in tracked) {\n            return;\n          }\n          module = Plugin.resolve(module) || module;\n          tracked[name] = Common.map(module.uses || [], function (dependency) {\n            if (Plugin.isPlugin(dependency)) {\n              Plugin.register(dependency);\n            }\n            var parsed = Plugin.dependencyParse(dependency),\n              resolved = Plugin.resolve(dependency);\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n              Common.warn('Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy', Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.');\n              resolved._warned = true;\n              module._warned = true;\n            } else if (!resolved) {\n              Common.warn('Plugin.dependencies:', Plugin.toString(dependency), 'used by', Plugin.toString(parsedBase), 'could not be resolved.');\n              module._warned = true;\n            }\n            return parsed.name;\n          });\n          for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n          }\n          return tracked;\n        };\n\n        /**\n         * Parses a dependency string into its components.\n         * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n         * See documentation for `Plugin.versionParse` for a description of the format.\n         * This function can also handle dependencies that are already resolved (e.g. a module object).\n         * @method dependencyParse\n         * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n         * @return {object} The dependency parsed into its components.\n         */\n        Plugin.dependencyParse = function (dependency) {\n          if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n            if (!pattern.test(dependency)) {\n              Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n            return {\n              name: dependency.split('@')[0],\n              range: dependency.split('@')[1] || '*'\n            };\n          }\n          return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n          };\n        };\n\n        /**\n         * Parses a version string into its components.  \n         * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n         * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n         * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n         * Only the following range types are supported:\n         * - Tilde ranges e.g. `~1.2.3`\n         * - Caret ranges e.g. `^1.2.3`\n         * - Exact version e.g. `1.2.3`\n         * - Any version `*`\n         * @method versionParse\n         * @param range {string} The version string.\n         * @return {object} The version range parsed into its components.\n         */\n        Plugin.versionParse = function (range) {\n          var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n          if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n          }\n          var identifiers = range.split('-');\n          range = identifiers[0];\n          var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function (part) {\n              return Number(part);\n            });\n          return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n          };\n        };\n\n        /**\n         * Returns `true` if `version` satisfies the given `range`.\n         * See documentation for `Plugin.versionParse` for a description of the format.\n         * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n         * @method versionSatisfies\n         * @param version {string} The version string.\n         * @param range {string} The range string.\n         * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n         */\n        Plugin.versionSatisfies = function (version, range) {\n          range = range || '*';\n          var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n          if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n              return true;\n            }\n            if (rangeParsed.operator === '~') {\n              return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n            if (rangeParsed.operator === '^') {\n              if (rangeParts[0] > 0) {\n                return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n              }\n              if (rangeParts[1] > 0) {\n                return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n              }\n              return versionParts[2] === rangeParts[2];\n            }\n          }\n          return version === range || version === '*';\n        };\n      })();\n    }, {\n      \"./Common\": 14\n    }],\n    21: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Runner` module is an optional utility which provides a game loop, \n      * that handles continuously updating a `Matter.Engine` for you within a browser.\n      * It is intended for development and debugging purposes, but may also be suitable for simple games.\n      * If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n      * Instead just call `Engine.update(engine, delta)` in your own loop.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Runner\n      */\n\n      var Runner = {};\n      module.exports = Runner;\n      var Events = _dereq_('./Events');\n      var Engine = _dereq_('./Engine');\n      var Common = _dereq_('./Common');\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n        if (!_requestAnimationFrame) {\n          var _frameTimeout;\n          _requestAnimationFrame = function (callback) {\n            _frameTimeout = setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n          _cancelAnimationFrame = function () {\n            clearTimeout(_frameTimeout);\n          };\n        }\n\n        /**\n         * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * @method create\n         * @param {} options\n         */\n        Runner.create = function (options) {\n          var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n          };\n          var runner = Common.extend(defaults, options);\n          runner.delta = runner.delta || 1000 / runner.fps;\n          runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n          runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n          runner.fps = 1000 / runner.delta;\n          return runner;\n        };\n\n        /**\n         * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n         * @method run\n         * @param {engine} engine\n         */\n        Runner.run = function (runner, engine) {\n          // create runner if engine is first argument\n          if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n          }\n          (function render(time) {\n            runner.frameRequestId = _requestAnimationFrame(render);\n            if (time && runner.enabled) {\n              Runner.tick(runner, engine, time);\n            }\n          })();\n          return runner;\n        };\n\n        /**\n         * A game loop utility that updates the engine and renderer by one step (a 'tick').\n         * Features delta smoothing, time correction and fixed or dynamic timing.\n         * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n         * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n         * @method tick\n         * @param {runner} runner\n         * @param {engine} engine\n         * @param {number} time\n         */\n        Runner.tick = function (runner, engine, time) {\n          var timing = engine.timing,\n            correction = 1,\n            delta;\n\n          // create an event object\n          var event = {\n            timestamp: timing.timestamp\n          };\n          Events.trigger(runner, 'beforeTick', event);\n          Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n          if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n          } else {\n            // dynamic timestep based on wall clock between calls\n            delta = time - runner.timePrev || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n\n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n          }\n\n          // time correction for time scaling\n          if (runner.timeScalePrev !== 0) correction *= timing.timeScale / runner.timeScalePrev;\n          if (timing.timeScale === 0) correction = 0;\n          runner.timeScalePrev = timing.timeScale;\n          runner.correction = correction;\n\n          // fps counter\n          runner.frameCounter += 1;\n          if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n          }\n          Events.trigger(runner, 'tick', event);\n          Events.trigger(engine, 'tick', event); // @deprecated\n\n          // if world has been modified, clear the render scene graph\n          if (engine.world.isModified && engine.render && engine.render.controller && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n          }\n\n          // update\n          Events.trigger(runner, 'beforeUpdate', event);\n          Engine.update(engine, delta, correction);\n          Events.trigger(runner, 'afterUpdate', event);\n\n          // render\n          // @deprecated\n          if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n          }\n\n          Events.trigger(runner, 'afterTick', event);\n          Events.trigger(engine, 'afterTick', event); // @deprecated\n        };\n\n        /**\n         * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n         * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n         * @method stop\n         * @param {runner} runner\n         */\n        Runner.stop = function (runner) {\n          _cancelAnimationFrame(runner.frameRequestId);\n        };\n\n        /**\n         * Alias for `Runner.run`.\n         * @method start\n         * @param {runner} runner\n         * @param {engine} engine\n         */\n        Runner.start = function (runner, engine) {\n          Runner.run(runner, engine);\n        };\n\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired at the start of a tick, before any updates to the engine or timing\n        *\n        * @event beforeTick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine timing updated, but just before update\n        *\n        * @event tick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired at the end of a tick, after engine update and after rendering\n        *\n        * @event afterTick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired before update\n        *\n        * @event beforeUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after update\n        *\n        * @event afterUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired before rendering\n        *\n        * @event beforeRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        * @deprecated\n        */\n\n        /**\n        * Fired after rendering\n        *\n        * @event afterRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        * @deprecated\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A flag that specifies whether the runner is running or not.\n         *\n         * @property enabled\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n         * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n         * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n         *\n         * @property isFixed\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Number` that specifies the time step between updates in milliseconds.\n         * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n         * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n         *\n         * @property delta\n         * @type number\n         * @default 1000 / 60\n         */\n      })();\n    }, {\n      \"./Common\": 14,\n      \"./Engine\": 15,\n      \"./Events\": 16\n    }],\n    22: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n      *\n      * @class Sleeping\n      */\n\n      var Sleeping = {};\n      module.exports = Sleeping;\n      var Events = _dereq_('./Events');\n      (function () {\n        Sleeping._motionWakeThreshold = 0.18;\n        Sleeping._motionSleepThreshold = 0.08;\n        Sleeping._minBias = 0.9;\n\n        /**\n         * Puts bodies to sleep or wakes them up depending on their motion.\n         * @method update\n         * @param {body[]} bodies\n         * @param {number} timeScale\n         */\n        Sleeping.update = function (bodies, timeScale) {\n          var timeFactor = timeScale * timeScale * timeScale;\n\n          // update bodies sleeping status\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n              motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n              Sleeping.set(body, false);\n              continue;\n            }\n            var minMotion = Math.min(body.motion, motion),\n              maxMotion = Math.max(body.motion, motion);\n\n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n              body.sleepCounter += 1;\n              if (body.sleepCounter >= body.sleepThreshold) Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n              body.sleepCounter -= 1;\n            }\n          }\n        };\n\n        /**\n         * Given a set of colliding pairs, wakes the sleeping bodies involved.\n         * @method afterCollisions\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n        Sleeping.afterCollisions = function (pairs, timeScale) {\n          var timeFactor = timeScale * timeScale * timeScale;\n\n          // wake up bodies involved in collisions\n          for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n\n            // don't wake inactive pairs\n            if (!pair.isActive) continue;\n            var collision = pair.collision,\n              bodyA = collision.bodyA.parent,\n              bodyB = collision.bodyB.parent;\n\n            // don't wake if at least one body is static\n            if (bodyA.isSleeping && bodyB.isSleeping || bodyA.isStatic || bodyB.isStatic) continue;\n            if (bodyA.isSleeping || bodyB.isSleeping) {\n              var sleepingBody = bodyA.isSleeping && !bodyA.isStatic ? bodyA : bodyB,\n                movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n              if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                Sleeping.set(sleepingBody, false);\n              }\n            }\n          }\n        };\n\n        /**\n         * Set a body as sleeping or awake.\n         * @method set\n         * @param {body} body\n         * @param {boolean} isSleeping\n         */\n        Sleeping.set = function (body, isSleeping) {\n          var wasSleeping = body.isSleeping;\n          if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n            if (!wasSleeping) {\n              Events.trigger(body, 'sleepStart');\n            }\n          } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n            if (wasSleeping) {\n              Events.trigger(body, 'sleepEnd');\n            }\n          }\n        };\n      })();\n    }, {\n      \"./Events\": 16\n    }],\n    23: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Bodies` module contains factory methods for creating rigid body models \n      * with commonly used body configurations (such as rectangles, circles and other polygons).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Bodies\n      */\n\n      // TODO: true circle bodies\n\n      var Bodies = {};\n      module.exports = Bodies;\n      var Vertices = _dereq_('../geometry/Vertices');\n      var Common = _dereq_('../core/Common');\n      var Body = _dereq_('../body/Body');\n      var Bounds = _dereq_('../geometry/Bounds');\n      var Vector = _dereq_('../geometry/Vector');\n      var decomp;\n      (function () {\n        /**\n         * Creates a new rigid body model with a rectangle hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method rectangle\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         * @param {object} [options]\n         * @return {body} A new rectangle body\n         */\n        Bodies.rectangle = function (x, y, width, height, options) {\n          options = options || {};\n          var rectangle = {\n            label: 'Rectangle Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n          };\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n          return Body.create(Common.extend({}, rectangle, options));\n        };\n\n        /**\n         * Creates a new rigid body model with a trapezoid hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method trapezoid\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         * @param {number} slope\n         * @param {object} [options]\n         * @return {body} A new trapezoid body\n         */\n        Bodies.trapezoid = function (x, y, width, height, slope, options) {\n          options = options || {};\n          slope *= 0.5;\n          var roof = (1 - slope * 2) * width;\n          var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n          if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + -height + ' L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n          } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n          }\n          var trapezoid = {\n            label: 'Trapezoid Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath(verticesPath)\n          };\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n          return Body.create(Common.extend({}, trapezoid, options));\n        };\n\n        /**\n         * Creates a new rigid body model with a circle hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method circle\n         * @param {number} x\n         * @param {number} y\n         * @param {number} radius\n         * @param {object} [options]\n         * @param {number} [maxSides]\n         * @return {body} A new circle body\n         */\n        Bodies.circle = function (x, y, radius, options, maxSides) {\n          options = options || {};\n          var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n          };\n\n          // approximate circles with polygons until true circles implemented in SAT\n          maxSides = maxSides || 25;\n          var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n          // optimisation: always use even number of sides (half the number of unique axes)\n          if (sides % 2 === 1) sides += 1;\n          return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n        };\n\n        /**\n         * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method polygon\n         * @param {number} x\n         * @param {number} y\n         * @param {number} sides\n         * @param {number} radius\n         * @param {object} [options]\n         * @return {body} A new regular polygon body\n         */\n        Bodies.polygon = function (x, y, sides, radius, options) {\n          options = options || {};\n          if (sides < 3) return Bodies.circle(x, y, radius, options);\n          var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n          for (var i = 0; i < sides; i += 1) {\n            var angle = offset + i * theta,\n              xx = Math.cos(angle) * radius,\n              yy = Math.sin(angle) * radius;\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n          }\n          var polygon = {\n            label: 'Polygon Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath(path)\n          };\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n          return Body.create(Common.extend({}, polygon, options));\n        };\n\n        /**\n         * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n         * If the vertices are convex, they will pass through as supplied.\n         * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n         * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n         * By default the decomposition will discard collinear edges (to improve performance).\n         * It can also optionally discard any parts that have an area less than `minimumArea`.\n         * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n         * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method fromVertices\n         * @param {number} x\n         * @param {number} y\n         * @param [[vector]] vertexSets\n         * @param {object} [options]\n         * @param {bool} [flagInternal=false]\n         * @param {number} [removeCollinear=0.01]\n         * @param {number} [minimumArea=10]\n         * @return {body}\n         */\n        Bodies.fromVertices = function (x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n          if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n          }\n          var body, parts, isConvex, vertices, i, j, k, v, z;\n          options = options || {};\n          parts = [];\n          flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n          removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n          minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n          if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n          }\n\n          // ensure vertexSets is an array of arrays\n          if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n          }\n          for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            if (isConvex || !decomp) {\n              if (isConvex) {\n                vertices = Vertices.clockwiseSort(vertices);\n              } else {\n                // fallback to convex hull when decomposition is not possible\n                vertices = Vertices.hull(vertices);\n              }\n              parts.push({\n                position: {\n                  x: x,\n                  y: y\n                },\n                vertices: vertices\n              });\n            } else {\n              // initialise a decomposition\n              var concave = vertices.map(function (vertex) {\n                return [vertex.x, vertex.y];\n              });\n\n              // vertices are concave and simple, we can decompose into parts\n              decomp.makeCCW(concave);\n              if (removeCollinear !== false) decomp.removeCollinearPoints(concave, removeCollinear);\n\n              // use the quick decomposition algorithm (Bayazit)\n              var decomposed = decomp.quickDecomp(concave);\n\n              // for each decomposed chunk\n              for (i = 0; i < decomposed.length; i++) {\n                var chunk = decomposed[i];\n\n                // convert vertices into the correct structure\n                var chunkVertices = chunk.map(function (vertices) {\n                  return {\n                    x: vertices[0],\n                    y: vertices[1]\n                  };\n                });\n\n                // skip small chunks\n                if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea) continue;\n\n                // create a compound part\n                parts.push({\n                  position: Vertices.centre(chunkVertices),\n                  vertices: chunkVertices\n                });\n              }\n            }\n          }\n\n          // create body parts\n          for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n          }\n\n          // flag internal edges (coincident part edges)\n          if (flagInternal) {\n            var coincident_max_dist = 5;\n            for (i = 0; i < parts.length; i++) {\n              var partA = parts[i];\n              for (j = i + 1; j < parts.length; j++) {\n                var partB = parts[j];\n                if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                  var pav = partA.vertices,\n                    pbv = partB.vertices;\n\n                  // iterate vertices of both parts\n                  for (k = 0; k < partA.vertices.length; k++) {\n                    for (z = 0; z < partB.vertices.length; z++) {\n                      // find distances between the vertices\n                      var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                        db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                      // if both vertices are very close, consider the edge concident (internal)\n                      if (da < coincident_max_dist && db < coincident_max_dist) {\n                        pav[k].isInternal = true;\n                        pbv[z].isInternal = true;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({\n              parts: parts.slice(0)\n            }, options));\n            Body.setPosition(body, {\n              x: x,\n              y: y\n            });\n            return body;\n          } else {\n            return parts[0];\n          }\n        };\n      })();\n    }, {\n      \"../body/Body\": 1,\n      \"../core/Common\": 14,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29\n    }],\n    24: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Composites` module contains factory methods for creating composite bodies\n      * with commonly used configurations (such as stacks and chains).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Composites\n      */\n\n      var Composites = {};\n      module.exports = Composites;\n      var Composite = _dereq_('../body/Composite');\n      var Constraint = _dereq_('../constraint/Constraint');\n      var Common = _dereq_('../core/Common');\n      var Body = _dereq_('../body/Body');\n      var Bodies = _dereq_('./Bodies');\n      (function () {\n        /**\n         * Create a new composite containing bodies created in the callback in a grid arrangement.\n         * This function uses the body's bounds to prevent overlaps.\n         * @method stack\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {function} callback\n         * @return {composite} A new composite containing objects created in the callback\n         */\n        Composites.stack = function (xx, yy, columns, rows, columnGap, rowGap, callback) {\n          var stack = Composite.create({\n              label: 'Stack'\n            }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n          for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            for (var column = 0; column < columns; column++) {\n              var body = callback(x, y, column, row, lastBody, i);\n              if (body) {\n                var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                  bodyWidth = body.bounds.max.x - body.bounds.min.x;\n                if (bodyHeight > maxHeight) maxHeight = bodyHeight;\n                Body.translate(body, {\n                  x: bodyWidth * 0.5,\n                  y: bodyHeight * 0.5\n                });\n                x = body.bounds.max.x + columnGap;\n                Composite.addBody(stack, body);\n                lastBody = body;\n                i += 1;\n              } else {\n                x += columnGap;\n              }\n            }\n            y += maxHeight + rowGap;\n            x = xx;\n          }\n          return stack;\n        };\n\n        /**\n         * Chains all bodies in the given composite together using constraints.\n         * @method chain\n         * @param {composite} composite\n         * @param {number} xOffsetA\n         * @param {number} yOffsetA\n         * @param {number} xOffsetB\n         * @param {number} yOffsetB\n         * @param {object} options\n         * @return {composite} A new composite containing objects chained together with constraints\n         */\n        Composites.chain = function (composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n          var bodies = composite.bodies;\n          for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n              bodyB = bodies[i],\n              bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n              bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x,\n              bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n              bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n            var defaults = {\n              bodyA: bodyA,\n              pointA: {\n                x: bodyAWidth * xOffsetA,\n                y: bodyAHeight * yOffsetA\n              },\n              bodyB: bodyB,\n              pointB: {\n                x: bodyBWidth * xOffsetB,\n                y: bodyBHeight * yOffsetB\n              }\n            };\n            var constraint = Common.extend(defaults, options);\n            Composite.addConstraint(composite, Constraint.create(constraint));\n          }\n          composite.label += ' Chain';\n          return composite;\n        };\n\n        /**\n         * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n         * @method mesh\n         * @param {composite} composite\n         * @param {number} columns\n         * @param {number} rows\n         * @param {boolean} crossBrace\n         * @param {object} options\n         * @return {composite} The composite containing objects meshed together with constraints\n         */\n        Composites.mesh = function (composite, columns, rows, crossBrace, options) {\n          var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n          for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n              bodyA = bodies[col - 1 + row * columns];\n              bodyB = bodies[col + row * columns];\n              Composite.addConstraint(composite, Constraint.create(Common.extend({\n                bodyA: bodyA,\n                bodyB: bodyB\n              }, options)));\n            }\n            if (row > 0) {\n              for (col = 0; col < columns; col++) {\n                bodyA = bodies[col + (row - 1) * columns];\n                bodyB = bodies[col + row * columns];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({\n                  bodyA: bodyA,\n                  bodyB: bodyB\n                }, options)));\n                if (crossBrace && col > 0) {\n                  bodyC = bodies[col - 1 + (row - 1) * columns];\n                  Composite.addConstraint(composite, Constraint.create(Common.extend({\n                    bodyA: bodyC,\n                    bodyB: bodyB\n                  }, options)));\n                }\n                if (crossBrace && col < columns - 1) {\n                  bodyC = bodies[col + 1 + (row - 1) * columns];\n                  Composite.addConstraint(composite, Constraint.create(Common.extend({\n                    bodyA: bodyC,\n                    bodyB: bodyB\n                  }, options)));\n                }\n              }\n            }\n          }\n          composite.label += ' Mesh';\n          return composite;\n        };\n\n        /**\n         * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n         * This function uses the body's bounds to prevent overlaps.\n         * @method pyramid\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {function} callback\n         * @return {composite} A new composite containing objects created in the callback\n         */\n        Composites.pyramid = function (xx, yy, columns, rows, columnGap, rowGap, callback) {\n          return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function (x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n              lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            if (row > actualRows) return;\n\n            // reverse row order\n            row = actualRows - row;\n            var start = row,\n              end = columns - 1 - row;\n            if (column < start || column > end) return;\n\n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n              Body.translate(lastBody, {\n                x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth,\n                y: 0\n              });\n            }\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n          });\n        };\n\n        /**\n         * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n         * @method newtonsCradle\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} number\n         * @param {number} size\n         * @param {number} length\n         * @return {composite} A new composite newtonsCradle body\n         */\n        Composites.newtonsCradle = function (xx, yy, number, size, length) {\n          var newtonsCradle = Composite.create({\n            label: 'Newtons Cradle'\n          });\n          for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n              circle = Bodies.circle(xx + i * (size * separation), yy + length, size, {\n                inertia: Infinity,\n                restitution: 1,\n                friction: 0,\n                frictionAir: 0.0001,\n                slop: 1\n              }),\n              constraint = Constraint.create({\n                pointA: {\n                  x: xx + i * (size * separation),\n                  y: yy\n                },\n                bodyB: circle\n              });\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n          }\n          return newtonsCradle;\n        };\n\n        /**\n         * Creates a composite with simple car setup of bodies and constraints.\n         * @method car\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} width\n         * @param {number} height\n         * @param {number} wheelSize\n         * @return {composite} A new composite car body\n         */\n        Composites.car = function (xx, yy, width, height, wheelSize) {\n          var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n          var car = Composite.create({\n              label: 'Car'\n            }),\n            body = Bodies.rectangle(xx, yy, width, height, {\n              collisionFilter: {\n                group: group\n              },\n              chamfer: {\n                radius: height * 0.5\n              },\n              density: 0.0002\n            });\n          var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n              group: group\n            },\n            friction: 0.8\n          });\n          var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n              group: group\n            },\n            friction: 0.8\n          });\n          var axelA = Constraint.create({\n            bodyB: body,\n            pointB: {\n              x: wheelAOffset,\n              y: wheelYOffset\n            },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n          });\n          var axelB = Constraint.create({\n            bodyB: body,\n            pointB: {\n              x: wheelBOffset,\n              y: wheelYOffset\n            },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n          });\n          Composite.addBody(car, body);\n          Composite.addBody(car, wheelA);\n          Composite.addBody(car, wheelB);\n          Composite.addConstraint(car, axelA);\n          Composite.addConstraint(car, axelB);\n          return car;\n        };\n\n        /**\n         * Creates a simple soft body like object.\n         * @method softBody\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {boolean} crossBrace\n         * @param {number} particleRadius\n         * @param {} particleOptions\n         * @param {} constraintOptions\n         * @return {composite} A new composite softBody\n         */\n        Composites.softBody = function (xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n          particleOptions = Common.extend({\n            inertia: Infinity\n          }, particleOptions);\n          constraintOptions = Common.extend({\n            stiffness: 0.2,\n            render: {\n              type: 'line',\n              anchors: false\n            }\n          }, constraintOptions);\n          var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function (x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n          });\n          Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n          softBody.label = 'Soft Body';\n          return softBody;\n        };\n      })();\n    }, {\n      \"../body/Body\": 1,\n      \"../body/Composite\": 2,\n      \"../constraint/Constraint\": 12,\n      \"../core/Common\": 14,\n      \"./Bodies\": 23\n    }],\n    25: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n      *\n      * @class Axes\n      */\n\n      var Axes = {};\n      module.exports = Axes;\n      var Vector = _dereq_('../geometry/Vector');\n      var Common = _dereq_('../core/Common');\n      (function () {\n        /**\n         * Creates a new set of axes from the given vertices.\n         * @method fromVertices\n         * @param {vertices} vertices\n         * @return {axes} A new axes from the given vertices\n         */\n        Axes.fromVertices = function (vertices) {\n          var axes = {};\n\n          // find the unique axes, using edge normal gradients\n          for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length,\n              normal = Vector.normalise({\n                x: vertices[j].y - vertices[i].y,\n                y: vertices[i].x - vertices[j].x\n              }),\n              gradient = normal.y === 0 ? Infinity : normal.x / normal.y;\n\n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n          }\n          return Common.values(axes);\n        };\n\n        /**\n         * Rotates a set of axes by the given angle.\n         * @method rotate\n         * @param {axes} axes\n         * @param {number} angle\n         */\n        Axes.rotate = function (axes, angle) {\n          if (angle === 0) return;\n          var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n          for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n              xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n          }\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../geometry/Vector\": 28\n    }],\n    26: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n      *\n      * @class Bounds\n      */\n\n      var Bounds = {};\n      module.exports = Bounds;\n      (function () {\n        /**\n         * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n         * @method create\n         * @param {vertices} vertices\n         * @return {bounds} A new bounds object\n         */\n        Bounds.create = function (vertices) {\n          var bounds = {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: 0,\n              y: 0\n            }\n          };\n          if (vertices) Bounds.update(bounds, vertices);\n          return bounds;\n        };\n\n        /**\n         * Updates bounds using the given vertices and extends the bounds given a velocity.\n         * @method update\n         * @param {bounds} bounds\n         * @param {vertices} vertices\n         * @param {vector} velocity\n         */\n        Bounds.update = function (bounds, vertices, velocity) {\n          bounds.min.x = Infinity;\n          bounds.max.x = -Infinity;\n          bounds.min.y = Infinity;\n          bounds.max.y = -Infinity;\n          for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n          }\n          if (velocity) {\n            if (velocity.x > 0) {\n              bounds.max.x += velocity.x;\n            } else {\n              bounds.min.x += velocity.x;\n            }\n            if (velocity.y > 0) {\n              bounds.max.y += velocity.y;\n            } else {\n              bounds.min.y += velocity.y;\n            }\n          }\n        };\n\n        /**\n         * Returns true if the bounds contains the given point.\n         * @method contains\n         * @param {bounds} bounds\n         * @param {vector} point\n         * @return {boolean} True if the bounds contain the point, otherwise false\n         */\n        Bounds.contains = function (bounds, point) {\n          return point.x >= bounds.min.x && point.x <= bounds.max.x && point.y >= bounds.min.y && point.y <= bounds.max.y;\n        };\n\n        /**\n         * Returns true if the two bounds intersect.\n         * @method overlaps\n         * @param {bounds} boundsA\n         * @param {bounds} boundsB\n         * @return {boolean} True if the bounds overlap, otherwise false\n         */\n        Bounds.overlaps = function (boundsA, boundsB) {\n          return boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y;\n        };\n\n        /**\n         * Translates the bounds by the given vector.\n         * @method translate\n         * @param {bounds} bounds\n         * @param {vector} vector\n         */\n        Bounds.translate = function (bounds, vector) {\n          bounds.min.x += vector.x;\n          bounds.max.x += vector.x;\n          bounds.min.y += vector.y;\n          bounds.max.y += vector.y;\n        };\n\n        /**\n         * Shifts the bounds to the given position.\n         * @method shift\n         * @param {bounds} bounds\n         * @param {vector} position\n         */\n        Bounds.shift = function (bounds, position) {\n          var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n          bounds.min.x = position.x;\n          bounds.max.x = position.x + deltaX;\n          bounds.min.y = position.y;\n          bounds.max.y = position.y + deltaY;\n        };\n      })();\n    }, {}],\n    27: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n      *\n      * To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Svg\n      */\n\n      var Svg = {};\n      module.exports = Svg;\n      var Bounds = _dereq_('../geometry/Bounds');\n      var Common = _dereq_('../core/Common');\n      (function () {\n        /**\n         * Converts an SVG path into an array of vector points.\n         * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n         * See `Bodies.fromVertices` which provides support for this.\n         * Note that this function is not guaranteed to support complex paths (such as those with holes).\n         * You must load the `pathseg.js` polyfill on newer browsers.\n         * @method pathToVertices\n         * @param {SVGPathElement} path\n         * @param {Number} [sampleLength=15]\n         * @return {Vector[]} points\n         */\n        Svg.pathToVertices = function (path, sampleLength) {\n          if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n          }\n\n          // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n          var i,\n            il,\n            total,\n            point,\n            segment,\n            segments,\n            segmentsQueue,\n            lastSegment,\n            lastPoint,\n            segmentIndex,\n            points = [],\n            lx,\n            ly,\n            length = 0,\n            x = 0,\n            y = 0;\n          sampleLength = sampleLength || 15;\n          var addPoint = function (px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n              if (lastPoint && isRelative) {\n                lx = lastPoint.x;\n                ly = lastPoint.y;\n              } else {\n                lx = 0;\n                ly = 0;\n              }\n              var point = {\n                x: lx + px,\n                y: ly + py\n              };\n\n              // set last point\n              if (isRelative || !lastPoint) {\n                lastPoint = point;\n              }\n              points.push(point);\n              x = lx + px;\n              y = ly + py;\n            }\n          };\n          var addSegmentPoint = function (segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') return;\n\n            // map segment to x and y\n            switch (segType) {\n              case 'M':\n              case 'L':\n              case 'T':\n              case 'C':\n              case 'S':\n              case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n              case 'H':\n                x = segment.x;\n                break;\n              case 'V':\n                y = segment.y;\n                break;\n            }\n            addPoint(x, y, segment.pathSegType);\n          };\n\n          // ensure path is absolute\n          Svg._svgPathToAbsolute(path);\n\n          // get total length\n          total = path.getTotalLength();\n\n          // queue segments\n          segments = [];\n          for (i = 0; i < path.pathSegList.numberOfItems; i += 1) segments.push(path.pathSegList.getItem(i));\n          segmentsQueue = segments.concat();\n\n          // sample through path\n          while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n              while (segmentsQueue.length && segmentsQueue[0] != segment) addSegmentPoint(segmentsQueue.shift());\n              lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n              case 'C':\n              case 'T':\n              case 'S':\n              case 'Q':\n              case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n            }\n\n            // increment by sample value\n            length += sampleLength;\n          }\n\n          // add remaining segments not passed by sampling\n          for (i = 0, il = segmentsQueue.length; i < il; ++i) addSegmentPoint(segmentsQueue[i]);\n          return points;\n        };\n        Svg._svgPathToAbsolute = function (path) {\n          // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n          // Copyright (c) Gavin Kistner\n          // http://phrogz.net/js/_ReuseLicense.txt\n          // Modifications: tidy formatting and naming\n          var x0,\n            y0,\n            x1,\n            y1,\n            x2,\n            y2,\n            segs = path.pathSegList,\n            x = 0,\n            y = 0,\n            len = segs.numberOfItems;\n          for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n              segType = seg.pathSegTypeAsLetter;\n            if (/[MLHVCSQTA]/.test(segType)) {\n              if ('x' in seg) x = seg.x;\n              if ('y' in seg) y = seg.y;\n            } else {\n              if ('x1' in seg) x1 = x + seg.x1;\n              if ('x2' in seg) x2 = x + seg.x2;\n              if ('y1' in seg) y1 = y + seg.y1;\n              if ('y2' in seg) y2 = y + seg.y2;\n              if ('x' in seg) x += seg.x;\n              if ('y' in seg) y += seg.y;\n              switch (segType) {\n                case 'm':\n                  segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                  break;\n                case 'l':\n                  segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                  break;\n                case 'h':\n                  segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                  break;\n                case 'v':\n                  segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                  break;\n                case 'c':\n                  segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                  break;\n                case 's':\n                  segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                  break;\n                case 'q':\n                  segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                  break;\n                case 't':\n                  segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                  break;\n                case 'a':\n                  segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                  break;\n                case 'z':\n                case 'Z':\n                  x = x0;\n                  y = y0;\n                  break;\n              }\n            }\n            if (segType == 'M' || segType == 'm') {\n              x0 = x;\n              y0 = y;\n            }\n          }\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../geometry/Bounds\": 26\n    }],\n    28: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Vector` module contains methods for creating and manipulating vectors.\n      * Vectors are the basis of all the geometry related operations in the engine.\n      * A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Vector\n      */\n\n      // TODO: consider params for reusing vector objects\n\n      var Vector = {};\n      module.exports = Vector;\n      (function () {\n        /**\n         * Creates a new vector.\n         * @method create\n         * @param {number} x\n         * @param {number} y\n         * @return {vector} A new vector\n         */\n        Vector.create = function (x, y) {\n          return {\n            x: x || 0,\n            y: y || 0\n          };\n        };\n\n        /**\n         * Returns a new vector with `x` and `y` copied from the given `vector`.\n         * @method clone\n         * @param {vector} vector\n         * @return {vector} A new cloned vector\n         */\n        Vector.clone = function (vector) {\n          return {\n            x: vector.x,\n            y: vector.y\n          };\n        };\n\n        /**\n         * Returns the magnitude (length) of a vector.\n         * @method magnitude\n         * @param {vector} vector\n         * @return {number} The magnitude of the vector\n         */\n        Vector.magnitude = function (vector) {\n          return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        };\n\n        /**\n         * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n         * @method magnitudeSquared\n         * @param {vector} vector\n         * @return {number} The squared magnitude of the vector\n         */\n        Vector.magnitudeSquared = function (vector) {\n          return vector.x * vector.x + vector.y * vector.y;\n        };\n\n        /**\n         * Rotates the vector about (0, 0) by specified angle.\n         * @method rotate\n         * @param {vector} vector\n         * @param {number} angle\n         * @param {vector} [output]\n         * @return {vector} The vector rotated about (0, 0)\n         */\n        Vector.rotate = function (vector, angle, output) {\n          var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n          if (!output) output = {};\n          var x = vector.x * cos - vector.y * sin;\n          output.y = vector.x * sin + vector.y * cos;\n          output.x = x;\n          return output;\n        };\n\n        /**\n         * Rotates the vector about a specified point by specified angle.\n         * @method rotateAbout\n         * @param {vector} vector\n         * @param {number} angle\n         * @param {vector} point\n         * @param {vector} [output]\n         * @return {vector} A new vector rotated about the point\n         */\n        Vector.rotateAbout = function (vector, angle, point, output) {\n          var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n          if (!output) output = {};\n          var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n          output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n          output.x = x;\n          return output;\n        };\n\n        /**\n         * Normalises a vector (such that its magnitude is `1`).\n         * @method normalise\n         * @param {vector} vector\n         * @return {vector} A new vector normalised\n         */\n        Vector.normalise = function (vector) {\n          var magnitude = Vector.magnitude(vector);\n          if (magnitude === 0) return {\n            x: 0,\n            y: 0\n          };\n          return {\n            x: vector.x / magnitude,\n            y: vector.y / magnitude\n          };\n        };\n\n        /**\n         * Returns the dot-product of two vectors.\n         * @method dot\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The dot product of the two vectors\n         */\n        Vector.dot = function (vectorA, vectorB) {\n          return vectorA.x * vectorB.x + vectorA.y * vectorB.y;\n        };\n\n        /**\n         * Returns the cross-product of two vectors.\n         * @method cross\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The cross product of the two vectors\n         */\n        Vector.cross = function (vectorA, vectorB) {\n          return vectorA.x * vectorB.y - vectorA.y * vectorB.x;\n        };\n\n        /**\n         * Returns the cross-product of three vectors.\n         * @method cross3\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} vectorC\n         * @return {number} The cross product of the three vectors\n         */\n        Vector.cross3 = function (vectorA, vectorB, vectorC) {\n          return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n        };\n\n        /**\n         * Adds the two vectors.\n         * @method add\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} [output]\n         * @return {vector} A new vector of vectorA and vectorB added\n         */\n        Vector.add = function (vectorA, vectorB, output) {\n          if (!output) output = {};\n          output.x = vectorA.x + vectorB.x;\n          output.y = vectorA.y + vectorB.y;\n          return output;\n        };\n\n        /**\n         * Subtracts the two vectors.\n         * @method sub\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} [output]\n         * @return {vector} A new vector of vectorA and vectorB subtracted\n         */\n        Vector.sub = function (vectorA, vectorB, output) {\n          if (!output) output = {};\n          output.x = vectorA.x - vectorB.x;\n          output.y = vectorA.y - vectorB.y;\n          return output;\n        };\n\n        /**\n         * Multiplies a vector and a scalar.\n         * @method mult\n         * @param {vector} vector\n         * @param {number} scalar\n         * @return {vector} A new vector multiplied by scalar\n         */\n        Vector.mult = function (vector, scalar) {\n          return {\n            x: vector.x * scalar,\n            y: vector.y * scalar\n          };\n        };\n\n        /**\n         * Divides a vector and a scalar.\n         * @method div\n         * @param {vector} vector\n         * @param {number} scalar\n         * @return {vector} A new vector divided by scalar\n         */\n        Vector.div = function (vector, scalar) {\n          return {\n            x: vector.x / scalar,\n            y: vector.y / scalar\n          };\n        };\n\n        /**\n         * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n         * @method perp\n         * @param {vector} vector\n         * @param {bool} [negate=false]\n         * @return {vector} The perpendicular vector\n         */\n        Vector.perp = function (vector, negate) {\n          negate = negate === true ? -1 : 1;\n          return {\n            x: negate * -vector.y,\n            y: negate * vector.x\n          };\n        };\n\n        /**\n         * Negates both components of a vector such that it points in the opposite direction.\n         * @method neg\n         * @param {vector} vector\n         * @return {vector} The negated vector\n         */\n        Vector.neg = function (vector) {\n          return {\n            x: -vector.x,\n            y: -vector.y\n          };\n        };\n\n        /**\n         * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n         * @method angle\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The angle in radians\n         */\n        Vector.angle = function (vectorA, vectorB) {\n          return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n        };\n\n        /**\n         * Temporary vector pool (not thread-safe).\n         * @property _temp\n         * @type {vector[]}\n         * @private\n         */\n        Vector._temp = [Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create()];\n      })();\n    }, {}],\n    29: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n      * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n      * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Vertices\n      */\n\n      var Vertices = {};\n      module.exports = Vertices;\n      var Vector = _dereq_('../geometry/Vector');\n      var Common = _dereq_('../core/Common');\n      (function () {\n        /**\n         * Creates a new set of `Matter.Body` compatible vertices.\n         * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n         *\n         *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n         *\n         * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n         * but with some additional references required for efficient collision detection routines.\n         *\n         * Vertices must be specified in clockwise order.\n         *\n         * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n         *\n         * @method create\n         * @param {vector[]} points\n         * @param {body} body\n         */\n        Vertices.create = function (points, body) {\n          var vertices = [];\n          for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n              vertex = {\n                x: point.x,\n                y: point.y,\n                index: i,\n                body: body,\n                isInternal: false\n              };\n            vertices.push(vertex);\n          }\n          return vertices;\n        };\n\n        /**\n         * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n         * into a `Matter.Vertices` object for the given `Matter.Body`.\n         * For parsing SVG paths, see `Svg.pathToVertices`.\n         * @method fromPath\n         * @param {string} path\n         * @param {body} body\n         * @return {vertices} vertices\n         */\n        Vertices.fromPath = function (path, body) {\n          var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n          path.replace(pathPattern, function (match, x, y) {\n            points.push({\n              x: parseFloat(x),\n              y: parseFloat(y)\n            });\n          });\n          return Vertices.create(points, body);\n        };\n\n        /**\n         * Returns the centre (centroid) of the set of vertices.\n         * @method centre\n         * @param {vertices} vertices\n         * @return {vector} The centre point\n         */\n        Vertices.centre = function (vertices) {\n          var area = Vertices.area(vertices, true),\n            centre = {\n              x: 0,\n              y: 0\n            },\n            cross,\n            temp,\n            j;\n          for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n          }\n          return Vector.div(centre, 6 * area);\n        };\n\n        /**\n         * Returns the average (mean) of the set of vertices.\n         * @method mean\n         * @param {vertices} vertices\n         * @return {vector} The average point\n         */\n        Vertices.mean = function (vertices) {\n          var average = {\n            x: 0,\n            y: 0\n          };\n          for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n          }\n          return Vector.div(average, vertices.length);\n        };\n\n        /**\n         * Returns the area of the set of vertices.\n         * @method area\n         * @param {vertices} vertices\n         * @param {bool} signed\n         * @return {number} The area\n         */\n        Vertices.area = function (vertices, signed) {\n          var area = 0,\n            j = vertices.length - 1;\n          for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n          }\n          if (signed) return area / 2;\n          return Math.abs(area) / 2;\n        };\n\n        /**\n         * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n         * @method inertia\n         * @param {vertices} vertices\n         * @param {number} mass\n         * @return {number} The polygon's moment of inertia\n         */\n        Vertices.inertia = function (vertices, mass) {\n          var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n          // find the polygon's moment of inertia, using second moment of area\n          // from equations at http://www.physicsforums.com/showthread.php?t=25293\n          for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n          }\n          return mass / 6 * (numerator / denominator);\n        };\n\n        /**\n         * Translates the set of vertices in-place.\n         * @method translate\n         * @param {vertices} vertices\n         * @param {vector} vector\n         * @param {number} scalar\n         */\n        Vertices.translate = function (vertices, vector, scalar) {\n          var i;\n          if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n              vertices[i].x += vector.x * scalar;\n              vertices[i].y += vector.y * scalar;\n            }\n          } else {\n            for (i = 0; i < vertices.length; i++) {\n              vertices[i].x += vector.x;\n              vertices[i].y += vector.y;\n            }\n          }\n          return vertices;\n        };\n\n        /**\n         * Rotates the set of vertices in-place.\n         * @method rotate\n         * @param {vertices} vertices\n         * @param {number} angle\n         * @param {vector} point\n         */\n        Vertices.rotate = function (vertices, angle, point) {\n          if (angle === 0) return;\n          var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n          for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n              dx = vertice.x - point.x,\n              dy = vertice.y - point.y;\n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n          }\n          return vertices;\n        };\n\n        /**\n         * Returns `true` if the `point` is inside the set of `vertices`.\n         * @method contains\n         * @param {vertices} vertices\n         * @param {vector} point\n         * @return {boolean} True if the vertices contains point, otherwise false\n         */\n        Vertices.contains = function (vertices, point) {\n          for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n              nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n              return false;\n            }\n          }\n          return true;\n        };\n\n        /**\n         * Scales the vertices from a point (default is centre) in-place.\n         * @method scale\n         * @param {vertices} vertices\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} point\n         */\n        Vertices.scale = function (vertices, scaleX, scaleY, point) {\n          if (scaleX === 1 && scaleY === 1) return vertices;\n          point = point || Vertices.centre(vertices);\n          var vertex, delta;\n          for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n          }\n          return vertices;\n        };\n\n        /**\n         * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n         * The radius parameter is a single number or an array to specify the radius for each vertex.\n         * @method chamfer\n         * @param {vertices} vertices\n         * @param {number[]} radius\n         * @param {number} quality\n         * @param {number} qualityMin\n         * @param {number} qualityMax\n         */\n        Vertices.chamfer = function (vertices, radius, quality, qualityMin, qualityMax) {\n          if (typeof radius === 'number') {\n            radius = [radius];\n          } else {\n            radius = radius || [8];\n          }\n\n          // quality defaults to -1, which is auto\n          quality = typeof quality !== 'undefined' ? quality : -1;\n          qualityMin = qualityMin || 2;\n          qualityMax = qualityMax || 14;\n          var newVertices = [];\n          for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n              vertex = vertices[i],\n              nextVertex = vertices[(i + 1) % vertices.length],\n              currentRadius = radius[i < radius.length ? i : radius.length - 1];\n            if (currentRadius === 0) {\n              newVertices.push(vertex);\n              continue;\n            }\n            var prevNormal = Vector.normalise({\n              x: vertex.y - prevVertex.y,\n              y: prevVertex.x - vertex.x\n            });\n            var nextNormal = Vector.normalise({\n              x: nextVertex.y - vertex.y,\n              y: vertex.x - nextVertex.x\n            });\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n              radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n              midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n              scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n            var precision = quality;\n            if (quality === -1) {\n              // automatically decide precision\n              precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1) precision += 1;\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n              theta = alpha / precision;\n            for (var j = 0; j < precision; j++) {\n              newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n          }\n          return newVertices;\n        };\n\n        /**\n         * Sorts the input vertices into clockwise order in place.\n         * @method clockwiseSort\n         * @param {vertices} vertices\n         * @return {vertices} vertices\n         */\n        Vertices.clockwiseSort = function (vertices) {\n          var centre = Vertices.mean(vertices);\n          vertices.sort(function (vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n          });\n          return vertices;\n        };\n\n        /**\n         * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n         * @method isConvex\n         * @param {vertices} vertices\n         * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n         */\n        Vertices.isConvex = function (vertices) {\n          // http://paulbourke.net/geometry/polygonmesh/\n          // Copyright (c) Paul Bourke (use permitted)\n\n          var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n          if (n < 3) return null;\n          for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n            if (z < 0) {\n              flag |= 1;\n            } else if (z > 0) {\n              flag |= 2;\n            }\n            if (flag === 3) {\n              return false;\n            }\n          }\n          if (flag !== 0) {\n            return true;\n          } else {\n            return null;\n          }\n        };\n\n        /**\n         * Returns the convex hull of the input vertices as a new array of points.\n         * @method hull\n         * @param {vertices} vertices\n         * @return [vertex] vertices\n         */\n        Vertices.hull = function (vertices) {\n          // http://geomalgorithms.com/a10-_hull-1.html\n\n          var upper = [],\n            lower = [],\n            vertex,\n            i;\n\n          // sort vertices on x-axis (y-axis for ties)\n          vertices = vertices.slice(0);\n          vertices.sort(function (vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n          });\n\n          // build lower hull\n          for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n            while (lower.length >= 2 && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n              lower.pop();\n            }\n            lower.push(vertex);\n          }\n\n          // build upper hull\n          for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n            while (upper.length >= 2 && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n              upper.pop();\n            }\n            upper.push(vertex);\n          }\n\n          // concatenation of the lower and upper hulls gives the convex hull\n          // omit last points because they are repeated at the beginning of the other list\n          upper.pop();\n          lower.pop();\n          return upper.concat(lower);\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../geometry/Vector\": 28\n    }],\n    30: [function (_dereq_, module, exports) {\n      var Matter = module.exports = _dereq_('../core/Matter');\n      Matter.Body = _dereq_('../body/Body');\n      Matter.Composite = _dereq_('../body/Composite');\n      Matter.World = _dereq_('../body/World');\n      Matter.Contact = _dereq_('../collision/Contact');\n      Matter.Detector = _dereq_('../collision/Detector');\n      Matter.Grid = _dereq_('../collision/Grid');\n      Matter.Pairs = _dereq_('../collision/Pairs');\n      Matter.Pair = _dereq_('../collision/Pair');\n      Matter.Query = _dereq_('../collision/Query');\n      Matter.Resolver = _dereq_('../collision/Resolver');\n      Matter.SAT = _dereq_('../collision/SAT');\n      Matter.Constraint = _dereq_('../constraint/Constraint');\n      Matter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n      Matter.Common = _dereq_('../core/Common');\n      Matter.Engine = _dereq_('../core/Engine');\n      Matter.Events = _dereq_('../core/Events');\n      Matter.Mouse = _dereq_('../core/Mouse');\n      Matter.Runner = _dereq_('../core/Runner');\n      Matter.Sleeping = _dereq_('../core/Sleeping');\n      Matter.Plugin = _dereq_('../core/Plugin');\n      Matter.Bodies = _dereq_('../factory/Bodies');\n      Matter.Composites = _dereq_('../factory/Composites');\n      Matter.Axes = _dereq_('../geometry/Axes');\n      Matter.Bounds = _dereq_('../geometry/Bounds');\n      Matter.Svg = _dereq_('../geometry/Svg');\n      Matter.Vector = _dereq_('../geometry/Vector');\n      Matter.Vertices = _dereq_('../geometry/Vertices');\n      Matter.Render = _dereq_('../render/Render');\n      Matter.RenderPixi = _dereq_('../render/RenderPixi');\n\n      // aliases\n\n      Matter.World.add = Matter.Composite.add;\n      Matter.World.remove = Matter.Composite.remove;\n      Matter.World.addComposite = Matter.Composite.addComposite;\n      Matter.World.addBody = Matter.Composite.addBody;\n      Matter.World.addConstraint = Matter.Composite.addConstraint;\n      Matter.World.clear = Matter.Composite.clear;\n      Matter.Engine.run = Matter.Runner.run;\n    }, {\n      \"../body/Body\": 1,\n      \"../body/Composite\": 2,\n      \"../body/World\": 3,\n      \"../collision/Contact\": 4,\n      \"../collision/Detector\": 5,\n      \"../collision/Grid\": 6,\n      \"../collision/Pair\": 7,\n      \"../collision/Pairs\": 8,\n      \"../collision/Query\": 9,\n      \"../collision/Resolver\": 10,\n      \"../collision/SAT\": 11,\n      \"../constraint/Constraint\": 12,\n      \"../constraint/MouseConstraint\": 13,\n      \"../core/Common\": 14,\n      \"../core/Engine\": 15,\n      \"../core/Events\": 16,\n      \"../core/Matter\": 17,\n      \"../core/Metrics\": 18,\n      \"../core/Mouse\": 19,\n      \"../core/Plugin\": 20,\n      \"../core/Runner\": 21,\n      \"../core/Sleeping\": 22,\n      \"../factory/Bodies\": 23,\n      \"../factory/Composites\": 24,\n      \"../geometry/Axes\": 25,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Svg\": 27,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29,\n      \"../render/Render\": 31,\n      \"../render/RenderPixi\": 32\n    }],\n    31: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n      * It is intended for development and debugging purposes, but may also be suitable for simple games.\n      * It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n      *\n      * @class Render\n      */\n\n      var Render = {};\n      module.exports = Render;\n      var Common = _dereq_('../core/Common');\n      var Composite = _dereq_('../body/Composite');\n      var Bounds = _dereq_('../geometry/Bounds');\n      var Events = _dereq_('../core/Events');\n      var Grid = _dereq_('../collision/Grid');\n      var Vector = _dereq_('../geometry/Vector');\n      var Mouse = _dereq_('../core/Mouse');\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n            window.setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n\n        /**\n         * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {object} [options]\n         * @return {render} A new renderer\n         */\n        Render.create = function (options) {\n          var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n              width: 800,\n              height: 600,\n              pixelRatio: 1,\n              background: '#18181d',\n              wireframeBackground: '#0f0f13',\n              hasBounds: !!options.bounds,\n              enabled: true,\n              wireframes: true,\n              showSleeping: true,\n              showDebug: false,\n              showBroadphase: false,\n              showBounds: false,\n              showVelocity: false,\n              showCollisions: false,\n              showSeparations: false,\n              showAxes: false,\n              showPositions: false,\n              showAngleIndicator: false,\n              showIds: false,\n              showShadows: false,\n              showVertexNumbers: false,\n              showConvexHulls: false,\n              showInternalEdges: false,\n              showMousePosition: false\n            }\n          };\n          var render = Common.extend(defaults, options);\n          if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n          }\n          render.mouse = options.mouse;\n          render.engine = options.engine;\n          render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n          render.context = render.canvas.getContext('2d');\n          render.textures = {};\n          render.bounds = render.bounds || {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: render.canvas.width,\n              y: render.canvas.height\n            }\n          };\n          if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n          }\n          if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n          } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n          }\n          return render;\n        };\n\n        /**\n         * Continuously updates the render canvas on the `requestAnimationFrame` event.\n         * @method run\n         * @param {render} render\n         */\n        Render.run = function (render) {\n          (function loop(time) {\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n          })();\n        };\n\n        /**\n         * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n         * @method stop\n         * @param {render} render\n         */\n        Render.stop = function (render) {\n          _cancelAnimationFrame(render.frameRequestId);\n        };\n\n        /**\n         * Sets the pixel ratio of the renderer and updates the canvas.\n         * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n         * @method setPixelRatio\n         * @param {render} render\n         * @param {number} pixelRatio\n         */\n        Render.setPixelRatio = function (render, pixelRatio) {\n          var options = render.options,\n            canvas = render.canvas;\n          if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n          }\n          options.pixelRatio = pixelRatio;\n          canvas.setAttribute('data-pixel-ratio', pixelRatio);\n          canvas.width = options.width * pixelRatio;\n          canvas.height = options.height * pixelRatio;\n          canvas.style.width = options.width + 'px';\n          canvas.style.height = options.height + 'px';\n          render.context.scale(pixelRatio, pixelRatio);\n        };\n\n        /**\n         * Positions and sizes the viewport around the given object bounds.\n         * Objects must have at least one of the following properties:\n         * - `object.bounds`\n         * - `object.position`\n         * - `object.min` and `object.max`\n         * - `object.x` and `object.y`\n         * @method lookAt\n         * @param {render} render\n         * @param {object[]} objects\n         * @param {vector} [padding]\n         * @param {bool} [center=true]\n         */\n        Render.lookAt = function (render, objects, padding, center) {\n          center = typeof center !== 'undefined' ? center : true;\n          objects = Common.isArray(objects) ? objects : [objects];\n          padding = padding || {\n            x: 0,\n            y: 0\n          };\n\n          // find bounds of all objects\n          var bounds = {\n            min: {\n              x: Infinity,\n              y: Infinity\n            },\n            max: {\n              x: -Infinity,\n              y: -Infinity\n            }\n          };\n          for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n              min = object.bounds ? object.bounds.min : object.min || object.position || object,\n              max = object.bounds ? object.bounds.max : object.max || object.position || object;\n            if (min && max) {\n              if (min.x < bounds.min.x) bounds.min.x = min.x;\n              if (max.x > bounds.max.x) bounds.max.x = max.x;\n              if (min.y < bounds.min.y) bounds.min.y = min.y;\n              if (max.y > bounds.max.y) bounds.max.y = max.y;\n            }\n          }\n\n          // find ratios\n          var width = bounds.max.x - bounds.min.x + 2 * padding.x,\n            height = bounds.max.y - bounds.min.y + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n          // find scale factor\n          if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n          } else {\n            scaleX = outerRatio / innerRatio;\n          }\n\n          // enable bounds\n          render.options.hasBounds = true;\n\n          // position and size\n          render.bounds.min.x = bounds.min.x;\n          render.bounds.max.x = bounds.min.x + width * scaleX;\n          render.bounds.min.y = bounds.min.y;\n          render.bounds.max.y = bounds.min.y + height * scaleY;\n\n          // center\n          if (center) {\n            render.bounds.min.x += width * 0.5 - width * scaleX * 0.5;\n            render.bounds.max.x += width * 0.5 - width * scaleX * 0.5;\n            render.bounds.min.y += height * 0.5 - height * scaleY * 0.5;\n            render.bounds.max.y += height * 0.5 - height * scaleY * 0.5;\n          }\n\n          // padding\n          render.bounds.min.x -= padding.x;\n          render.bounds.max.x -= padding.x;\n          render.bounds.min.y -= padding.y;\n          render.bounds.max.y -= padding.y;\n\n          // update mouse\n          if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n              x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n              y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n            Mouse.setOffset(render.mouse, render.bounds.min);\n          }\n        };\n\n        /**\n         * Applies viewport transforms based on `render.bounds` to a render context.\n         * @method startViewTransform\n         * @param {render} render\n         */\n        Render.startViewTransform = function (render) {\n          var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n          render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n          render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        };\n\n        /**\n         * Resets all transforms on the render context.\n         * @method endViewTransform\n         * @param {render} render\n         */\n        Render.endViewTransform = function (render) {\n          render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n        };\n\n        /**\n         * Renders the given `engine`'s `Matter.World` object.\n         * This is the entry point for all rendering and should be called every time the scene changes.\n         * @method world\n         * @param {render} render\n         */\n        Render.world = function (render) {\n          var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n          var event = {\n            timestamp: engine.timing.timestamp\n          };\n          Events.trigger(render, 'beforeRender', event);\n\n          // apply background if it has changed\n          if (render.currentBackground !== background) _applyBackground(render, background);\n\n          // clear the canvas with a transparent fill, to allow the canvas background to show\n          context.globalCompositeOperation = 'source-in';\n          context.fillStyle = \"transparent\";\n          context.fillRect(0, 0, canvas.width, canvas.height);\n          context.globalCompositeOperation = 'source-over';\n\n          // handle bounds\n          if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n              var body = allBodies[i];\n              if (Bounds.overlaps(body.bounds, render.bounds)) bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n              var constraint = allConstraints[i],\n                bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                pointAWorld = constraint.pointA,\n                pointBWorld = constraint.pointB;\n              if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n              if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n              if (!pointAWorld || !pointBWorld) continue;\n              if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n              Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n              });\n              Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n          } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n          }\n          if (!options.wireframes || engine.enableSleeping && options.showSleeping) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n          } else {\n            if (options.showConvexHulls) Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n          }\n          if (options.showBounds) Render.bodyBounds(render, bodies, context);\n          if (options.showAxes || options.showAngleIndicator) Render.bodyAxes(render, bodies, context);\n          if (options.showPositions) Render.bodyPositions(render, bodies, context);\n          if (options.showVelocity) Render.bodyVelocity(render, bodies, context);\n          if (options.showIds) Render.bodyIds(render, bodies, context);\n          if (options.showSeparations) Render.separations(render, engine.pairs.list, context);\n          if (options.showCollisions) Render.collisions(render, engine.pairs.list, context);\n          if (options.showVertexNumbers) Render.vertexNumbers(render, bodies, context);\n          if (options.showMousePosition) Render.mousePosition(render, render.mouse, context);\n          Render.constraints(constraints, context);\n          if (options.showBroadphase && engine.broadphase.controller === Grid) Render.grid(render, engine.broadphase, context);\n          if (options.showDebug) Render.debug(render, context);\n          if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n          }\n          Events.trigger(render, 'afterRender', event);\n        };\n\n        /**\n         * Description\n         * @private\n         * @method debug\n         * @param {render} render\n         * @param {RenderingContext} context\n         */\n        Render.debug = function (render, context) {\n          var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n          if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n            if (metrics.timing) {\n              text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n          }\n          if (render.debugString) {\n            c.font = \"12px Arial\";\n            if (options.wireframes) {\n              c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n              c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n            var split = render.debugString.split('\\n');\n            for (var i = 0; i < split.length; i++) {\n              c.fillText(split[i], 50, 50 + i * 18);\n            }\n          }\n        };\n\n        /**\n         * Description\n         * @private\n         * @method constraints\n         * @param {constraint[]} constraints\n         * @param {RenderingContext} context\n         */\n        Render.constraints = function (constraints, context) {\n          var c = context;\n          for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB) continue;\n            var bodyA = constraint.bodyA,\n              bodyB = constraint.bodyB,\n              start,\n              end;\n            if (bodyA) {\n              start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n              start = constraint.pointA;\n            }\n            if (constraint.render.type === 'pin') {\n              c.beginPath();\n              c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n              c.closePath();\n            } else {\n              if (bodyB) {\n                end = Vector.add(bodyB.position, constraint.pointB);\n              } else {\n                end = constraint.pointB;\n              }\n              c.beginPath();\n              c.moveTo(start.x, start.y);\n              if (constraint.render.type === 'spring') {\n                var delta = Vector.sub(end, start),\n                  normal = Vector.perp(Vector.normalise(delta)),\n                  coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                  offset;\n                for (var j = 1; j < coils; j += 1) {\n                  offset = j % 2 === 0 ? 1 : -1;\n                  c.lineTo(start.x + delta.x * (j / coils) + normal.x * offset * 4, start.y + delta.y * (j / coils) + normal.y * offset * 4);\n                }\n              }\n              c.lineTo(end.x, end.y);\n            }\n            if (constraint.render.lineWidth) {\n              c.lineWidth = constraint.render.lineWidth;\n              c.strokeStyle = constraint.render.strokeStyle;\n              c.stroke();\n            }\n            if (constraint.render.anchors) {\n              c.fillStyle = constraint.render.strokeStyle;\n              c.beginPath();\n              c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n              c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n              c.closePath();\n              c.fill();\n            }\n          }\n        };\n\n        /**\n         * Description\n         * @private\n         * @method bodyShadows\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n        Render.bodyShadows = function (render, bodies, context) {\n          var c = context,\n            engine = render.engine;\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (!body.render.visible) continue;\n            if (body.circleRadius) {\n              c.beginPath();\n              c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n              c.closePath();\n            } else {\n              c.beginPath();\n              c.moveTo(body.vertices[0].x, body.vertices[0].y);\n              for (var j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n              }\n              c.closePath();\n            }\n            var distanceX = body.position.x - render.options.width * 0.5,\n              distanceY = body.position.y - render.options.height * 0.2,\n              distance = Math.abs(distanceX) + Math.abs(distanceY);\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n            c.fill();\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n          }\n        };\n\n        /**\n         * Description\n         * @private\n         * @method bodies\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n        Render.bodies = function (render, bodies, context) {\n          var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              if (!part.render.visible) continue;\n              if (options.showSleeping && body.isSleeping) {\n                c.globalAlpha = 0.5 * part.render.opacity;\n              } else if (part.render.opacity !== 1) {\n                c.globalAlpha = part.render.opacity;\n              }\n              if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                // part sprite\n                var sprite = part.render.sprite,\n                  texture = _getTexture(render, sprite.texture);\n                c.translate(part.position.x, part.position.y);\n                c.rotate(part.angle);\n                c.drawImage(texture, texture.width * -sprite.xOffset * sprite.xScale, texture.height * -sprite.yOffset * sprite.yScale, texture.width * sprite.xScale, texture.height * sprite.yScale);\n\n                // revert translation, hopefully faster than save / restore\n                c.rotate(-part.angle);\n                c.translate(-part.position.x, -part.position.y);\n              } else {\n                // part polygon\n                if (part.circleRadius) {\n                  c.beginPath();\n                  c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                } else {\n                  c.beginPath();\n                  c.moveTo(part.vertices[0].x, part.vertices[0].y);\n                  for (var j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                      c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                      c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                      c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                  }\n                  c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                  c.closePath();\n                }\n                if (!options.wireframes) {\n                  c.fillStyle = part.render.fillStyle;\n                  if (part.render.lineWidth) {\n                    c.lineWidth = part.render.lineWidth;\n                    c.strokeStyle = part.render.strokeStyle;\n                    c.stroke();\n                  }\n                  c.fill();\n                } else {\n                  c.lineWidth = 1;\n                  c.strokeStyle = '#bbb';\n                  c.stroke();\n                }\n              }\n              c.globalAlpha = 1;\n            }\n          }\n        };\n\n        /**\n         * Optimised method for drawing body wireframes in one pass\n         * @private\n         * @method bodyWireframes\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n        Render.bodyWireframes = function (render, bodies, context) {\n          var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n          c.beginPath();\n\n          // render all bodies\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              c.moveTo(part.vertices[0].x, part.vertices[0].y);\n              for (j = 1; j < part.vertices.length; j++) {\n                if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                  c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                } else {\n                  c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                }\n                if (part.vertices[j].isInternal && !showInternalEdges) {\n                  c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                }\n              }\n              c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n          }\n          c.lineWidth = 1;\n          c.strokeStyle = '#bbb';\n          c.stroke();\n        };\n\n        /**\n         * Optimised method for drawing body convex hull wireframes in one pass\n         * @private\n         * @method bodyConvexHulls\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n        Render.bodyConvexHulls = function (render, bodies, context) {\n          var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n          c.beginPath();\n\n          // render convex hulls\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible || body.parts.length === 1) continue;\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n            for (j = 1; j < body.vertices.length; j++) {\n              c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n          }\n          c.lineWidth = 1;\n          c.strokeStyle = 'rgba(255,255,255,0.2)';\n          c.stroke();\n        };\n\n        /**\n         * Renders body vertex numbers.\n         * @private\n         * @method vertexNumbers\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n        Render.vertexNumbers = function (render, bodies, context) {\n          var c = context,\n            i,\n            j,\n            k;\n          for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n              var part = parts[k];\n              for (j = 0; j < part.vertices.length; j++) {\n                c.fillStyle = 'rgba(255,255,255,0.2)';\n                c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n              }\n            }\n          }\n        };\n\n        /**\n         * Renders mouse position.\n         * @private\n         * @method mousePosition\n         * @param {render} render\n         * @param {mouse} mouse\n         * @param {RenderingContext} context\n         */\n        Render.mousePosition = function (render, mouse, context) {\n          var c = context;\n          c.fillStyle = 'rgba(255,255,255,0.8)';\n          c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n        };\n\n        /**\n         * Draws body bounds\n         * @private\n         * @method bodyBounds\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n        Render.bodyBounds = function (render, bodies, context) {\n          var c = context,\n            engine = render.engine,\n            options = render.options;\n          c.beginPath();\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.render.visible) {\n              var parts = bodies[i].parts;\n              for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n              }\n            }\n          }\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n          } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n          }\n          c.lineWidth = 1;\n          c.stroke();\n        };\n\n        /**\n         * Draws body angle indicators and axes\n         * @private\n         * @method bodyAxes\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n        Render.bodyAxes = function (render, bodies, context) {\n          var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n          c.beginPath();\n          for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n              parts = body.parts;\n            if (!body.render.visible) continue;\n            if (options.showAxes) {\n              // render all axes\n              for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                part = parts[j];\n                for (k = 0; k < part.axes.length; k++) {\n                  var axis = part.axes[k];\n                  c.moveTo(part.position.x, part.position.y);\n                  c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                }\n              }\n            } else {\n              for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                part = parts[j];\n                for (k = 0; k < part.axes.length; k++) {\n                  // render a single axis indicator\n                  c.moveTo(part.position.x, part.position.y);\n                  c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2);\n                }\n              }\n            }\n          }\n          if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n          } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n          }\n          c.stroke();\n          c.globalCompositeOperation = 'source-over';\n        };\n\n        /**\n         * Draws body positions\n         * @private\n         * @method bodyPositions\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n        Render.bodyPositions = function (render, bodies, context) {\n          var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n          c.beginPath();\n\n          // render current positions\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n              c.closePath();\n            }\n          }\n          if (options.wireframes) {\n            c.fillStyle = 'indianred';\n          } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n          }\n          c.fill();\n          c.beginPath();\n\n          // render previous positions\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n              c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n              c.closePath();\n            }\n          }\n          c.fillStyle = 'rgba(255,165,0,0.8)';\n          c.fill();\n        };\n\n        /**\n         * Draws body velocity\n         * @private\n         * @method bodyVelocity\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n        Render.bodyVelocity = function (render, bodies, context) {\n          var c = context;\n          c.beginPath();\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (!body.render.visible) continue;\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n          }\n          c.lineWidth = 3;\n          c.strokeStyle = 'cornflowerblue';\n          c.stroke();\n        };\n\n        /**\n         * Draws body ids\n         * @private\n         * @method bodyIds\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n        Render.bodyIds = function (render, bodies, context) {\n          var c = context,\n            i,\n            j;\n          for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible) continue;\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n              var part = parts[j];\n              c.font = \"12px Arial\";\n              c.fillStyle = 'rgba(255,255,255,0.5)';\n              c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n          }\n        };\n\n        /**\n         * Description\n         * @private\n         * @method collisions\n         * @param {render} render\n         * @param {pair[]} pairs\n         * @param {RenderingContext} context\n         */\n        Render.collisions = function (render, pairs, context) {\n          var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n          c.beginPath();\n\n          // render collision positions\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n              var contact = pair.activeContacts[j],\n                vertex = contact.vertex;\n              c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n          }\n          if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n          } else {\n            c.fillStyle = 'orange';\n          }\n          c.fill();\n          c.beginPath();\n\n          // render collision normals\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n            if (pair.activeContacts.length > 0) {\n              var normalPosX = pair.activeContacts[0].vertex.x,\n                normalPosY = pair.activeContacts[0].vertex.y;\n              if (pair.activeContacts.length === 2) {\n                normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n              }\n              if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n              } else {\n                c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n              }\n              c.lineTo(normalPosX, normalPosY);\n            }\n          }\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n          } else {\n            c.strokeStyle = 'orange';\n          }\n          c.lineWidth = 1;\n          c.stroke();\n        };\n\n        /**\n         * Description\n         * @private\n         * @method separations\n         * @param {render} render\n         * @param {pair[]} pairs\n         * @param {RenderingContext} context\n         */\n        Render.separations = function (render, pairs, context) {\n          var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n          c.beginPath();\n\n          // render separations\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n            var k = 1;\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n            k = 1;\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n          }\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n          } else {\n            c.strokeStyle = 'orange';\n          }\n          c.stroke();\n        };\n\n        /**\n         * Description\n         * @private\n         * @method grid\n         * @param {render} render\n         * @param {grid} grid\n         * @param {RenderingContext} context\n         */\n        Render.grid = function (render, grid, context) {\n          var c = context,\n            options = render.options;\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n          } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n          }\n          c.beginPath();\n          var bucketKeys = Common.keys(grid.buckets);\n          for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n            if (grid.buckets[bucketId].length < 2) continue;\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth, 0.5 + parseInt(region[2], 10) * grid.bucketHeight, grid.bucketWidth, grid.bucketHeight);\n          }\n          c.lineWidth = 1;\n          c.stroke();\n        };\n\n        /**\n         * Description\n         * @private\n         * @method inspector\n         * @param {inspector} inspector\n         * @param {RenderingContext} context\n         */\n        Render.inspector = function (inspector, context) {\n          var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n          if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n              boundsHeight = render.bounds.max.y - render.bounds.min.y,\n              boundsScaleX = boundsWidth / render.options.width,\n              boundsScaleY = boundsHeight / render.options.height;\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n          }\n          for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1, 2]);\n            switch (item.type) {\n              case 'body':\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3), Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n                break;\n              case 'constraint':\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA) point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n                break;\n            }\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n          }\n\n          // render selection region\n          if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y), Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n          }\n          if (options.hasBounds) context.setTransform(1, 0, 0, 1, 0, 0);\n        };\n\n        /**\n         * Description\n         * @method _createCanvas\n         * @private\n         * @param {} width\n         * @param {} height\n         * @return canvas\n         */\n        var _createCanvas = function (width, height) {\n          var canvas = document.createElement('canvas');\n          canvas.width = width;\n          canvas.height = height;\n          canvas.oncontextmenu = function () {\n            return false;\n          };\n          canvas.onselectstart = function () {\n            return false;\n          };\n          return canvas;\n        };\n\n        /**\n         * Gets the pixel ratio of the canvas.\n         * @method _getPixelRatio\n         * @private\n         * @param {HTMLElement} canvas\n         * @return {Number} pixel ratio\n         */\n        var _getPixelRatio = function (canvas) {\n          var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n          return devicePixelRatio / backingStorePixelRatio;\n        };\n\n        /**\n         * Gets the requested texture (an Image) via its path\n         * @method _getTexture\n         * @private\n         * @param {render} render\n         * @param {string} imagePath\n         * @return {Image} texture\n         */\n        var _getTexture = function (render, imagePath) {\n          var image = render.textures[imagePath];\n          if (image) return image;\n          image = render.textures[imagePath] = new Image();\n          image.src = imagePath;\n          return image;\n        };\n\n        /**\n         * Applies the background to the canvas using CSS.\n         * @method applyBackground\n         * @private\n         * @param {render} render\n         * @param {string} background\n         */\n        var _applyBackground = function (render, background) {\n          var cssBackground = background;\n          if (/(jpg|gif|png)$/.test(background)) cssBackground = 'url(' + background + ')';\n          render.canvas.style.background = cssBackground;\n          render.canvas.style.backgroundSize = \"contain\";\n          render.currentBackground = background;\n        };\n\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired before rendering\n        *\n        * @event beforeRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after rendering\n        *\n        * @event afterRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A back-reference to the `Matter.Render` module.\n         *\n         * @property controller\n         * @type render\n         */\n\n        /**\n         * A reference to the `Matter.Engine` instance to be used.\n         *\n         * @property engine\n         * @type engine\n         */\n\n        /**\n         * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n         *\n         * @property element\n         * @type HTMLElement\n         * @default null\n         */\n\n        /**\n         * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n         *\n         * @property canvas\n         * @type HTMLCanvasElement\n         * @default null\n         */\n\n        /**\n         * The configuration options of the renderer.\n         *\n         * @property options\n         * @type {}\n         */\n\n        /**\n         * The target width in pixels of the `render.canvas` to be created.\n         *\n         * @property options.width\n         * @type number\n         * @default 800\n         */\n\n        /**\n         * The target height in pixels of the `render.canvas` to be created.\n         *\n         * @property options.height\n         * @type number\n         * @default 600\n         */\n\n        /**\n         * A flag that specifies if `render.bounds` should be used when rendering.\n         *\n         * @property options.hasBounds\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Bounds` object that specifies the drawing view region.\n         * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n         * This allows for creating views that can pan or zoom around the scene.\n         * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n         *\n         * @property bounds\n         * @type bounds\n         */\n\n        /**\n         * The 2d rendering context from the `render.canvas` element.\n         *\n         * @property context\n         * @type CanvasRenderingContext2D\n         */\n\n        /**\n         * The sprite texture cache.\n         *\n         * @property textures\n         * @type {}\n         */\n      })();\n    }, {\n      \"../body/Composite\": 2,\n      \"../collision/Grid\": 6,\n      \"../core/Common\": 14,\n      \"../core/Events\": 16,\n      \"../core/Mouse\": 19,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28\n    }],\n    32: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.RenderPixi` module is an example renderer using pixi.js.\n      * See also `Matter.Render` for a canvas based renderer.\n      *\n      * @class RenderPixi\n      * @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n      * It will likely be moved to its own repository (but maintenance will be limited).\n      */\n\n      var RenderPixi = {};\n      module.exports = RenderPixi;\n      var Bounds = _dereq_('../geometry/Bounds');\n      var Composite = _dereq_('../body/Composite');\n      var Common = _dereq_('../core/Common');\n      var Events = _dereq_('../core/Events');\n      var Vector = _dereq_('../geometry/Vector');\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n            window.setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n\n        /**\n         * Creates a new Pixi.js WebGL renderer\n         * @method create\n         * @param {object} options\n         * @return {RenderPixi} A new renderer\n         * @deprecated\n         */\n        RenderPixi.create = function (options) {\n          Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n          var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n              width: 800,\n              height: 600,\n              background: '#fafafa',\n              wireframeBackground: '#222',\n              hasBounds: false,\n              enabled: true,\n              wireframes: true,\n              showSleeping: true,\n              showDebug: false,\n              showBroadphase: false,\n              showBounds: false,\n              showVelocity: false,\n              showCollisions: false,\n              showAxes: false,\n              showPositions: false,\n              showAngleIndicator: false,\n              showIds: false,\n              showShadows: false\n            }\n          };\n          var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n          // init pixi\n          render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n          };\n          render.mouse = options.mouse;\n          render.engine = options.engine;\n          render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n          render.container = render.container || new PIXI.Container();\n          render.spriteContainer = render.spriteContainer || new PIXI.Container();\n          render.canvas = render.canvas || render.renderer.view;\n          render.bounds = render.bounds || {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: render.options.width,\n              y: render.options.height\n            }\n          };\n\n          // event listeners\n          Events.on(render.engine, 'beforeUpdate', function () {\n            RenderPixi.clear(render);\n          });\n\n          // caches\n          render.textures = {};\n          render.sprites = {};\n          render.primitives = {};\n\n          // use a sprite batch for performance\n          render.container.addChild(render.spriteContainer);\n\n          // insert canvas\n          if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n          } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n          }\n\n          // prevent menus on canvas\n          render.canvas.oncontextmenu = function () {\n            return false;\n          };\n          render.canvas.onselectstart = function () {\n            return false;\n          };\n          return render;\n        };\n\n        /**\n         * Continuously updates the render canvas on the `requestAnimationFrame` event.\n         * @method run\n         * @param {render} render\n         * @deprecated\n         */\n        RenderPixi.run = function (render) {\n          (function loop(time) {\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n          })();\n        };\n\n        /**\n         * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n         * @method stop\n         * @param {render} render\n         * @deprecated\n         */\n        RenderPixi.stop = function (render) {\n          _cancelAnimationFrame(render.frameRequestId);\n        };\n\n        /**\n         * Clears the scene graph\n         * @method clear\n         * @param {RenderPixi} render\n         * @deprecated\n         */\n        RenderPixi.clear = function (render) {\n          var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n          // clear stage container\n          while (container.children[0]) {\n            container.removeChild(container.children[0]);\n          }\n\n          // clear sprite batch\n          while (spriteContainer.children[0]) {\n            spriteContainer.removeChild(spriteContainer.children[0]);\n          }\n          var bgSprite = render.sprites['bg-0'];\n\n          // clear caches\n          render.textures = {};\n          render.sprites = {};\n          render.primitives = {};\n\n          // set background sprite\n          render.sprites['bg-0'] = bgSprite;\n          if (bgSprite) container.addChildAt(bgSprite, 0);\n\n          // add sprite batch back into container\n          render.container.addChild(render.spriteContainer);\n\n          // reset background state\n          render.currentBackground = null;\n\n          // reset bounds transforms\n          container.scale.set(1, 1);\n          container.position.set(0, 0);\n        };\n\n        /**\n         * Sets the background of the canvas \n         * @method setBackground\n         * @param {RenderPixi} render\n         * @param {string} background\n         * @deprecated\n         */\n        RenderPixi.setBackground = function (render, background) {\n          if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n              bgSprite = render.sprites['bg-0'];\n            if (isColor) {\n              // if solid background color\n              var color = Common.colorToNumber(background);\n              render.renderer.backgroundColor = color;\n\n              // remove background sprite if existing\n              if (bgSprite) render.container.removeChild(bgSprite);\n            } else {\n              // initialise background sprite if needed\n              if (!bgSprite) {\n                var texture = _getTexture(render, background);\n                bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                bgSprite.position.x = 0;\n                bgSprite.position.y = 0;\n                render.container.addChildAt(bgSprite, 0);\n              }\n            }\n            render.currentBackground = background;\n          }\n        };\n\n        /**\n         * Description\n         * @method world\n         * @param {engine} engine\n         * @deprecated\n         */\n        RenderPixi.world = function (render) {\n          var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n          if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n          } else {\n            RenderPixi.setBackground(render, options.background);\n          }\n\n          // handle bounds\n          var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n          if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n              var body = bodies[i];\n              body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n              var constraint = allConstraints[i],\n                bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                pointAWorld = constraint.pointA,\n                pointBWorld = constraint.pointB;\n              if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n              if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n              if (!pointAWorld || !pointBWorld) continue;\n              if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n          } else {\n            constraints = allConstraints;\n          }\n          for (i = 0; i < bodies.length; i++) RenderPixi.body(render, bodies[i]);\n          for (i = 0; i < constraints.length; i++) RenderPixi.constraint(render, constraints[i]);\n          renderer.render(container);\n        };\n\n        /**\n         * Description\n         * @method constraint\n         * @param {engine} engine\n         * @param {constraint} constraint\n         * @deprecated\n         */\n        RenderPixi.constraint = function (render, constraint) {\n          var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n          // initialise constraint primitive if not existing\n          if (!primitive) primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n          // don't render if constraint does not have two end points\n          if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n          }\n\n          // add to scene graph if not already there\n          if (Common.indexOf(container.children, primitive) === -1) container.addChild(primitive);\n\n          // render the constraint on every update, since they can change dynamically\n          primitive.clear();\n          primitive.beginFill(0, 0);\n          primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n          if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n          } else {\n            primitive.moveTo(pointA.x, pointA.y);\n          }\n          if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n          } else {\n            primitive.lineTo(pointB.x, pointB.y);\n          }\n          primitive.endFill();\n        };\n\n        /**\n         * Description\n         * @method body\n         * @param {engine} engine\n         * @param {body} body\n         * @deprecated\n         */\n        RenderPixi.body = function (render, body) {\n          var engine = render.engine,\n            bodyRender = body.render;\n          if (!bodyRender.visible) return;\n          if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n              sprite = render.sprites[spriteId],\n              spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite) sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1) spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n          } else {\n            var primitiveId = 'b-' + body.id,\n              primitive = render.primitives[primitiveId],\n              container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n              primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n              primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1) container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n          }\n        };\n\n        /**\n         * Creates a body sprite\n         * @method _createBodySprite\n         * @private\n         * @param {RenderPixi} render\n         * @param {body} body\n         * @return {PIXI.Sprite} sprite\n         * @deprecated\n         */\n        var _createBodySprite = function (render, body) {\n          var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n          sprite.anchor.x = body.render.sprite.xOffset;\n          sprite.anchor.y = body.render.sprite.yOffset;\n          return sprite;\n        };\n\n        /**\n         * Creates a body primitive\n         * @method _createBodyPrimitive\n         * @private\n         * @param {RenderPixi} render\n         * @param {body} body\n         * @return {PIXI.Graphics} graphics\n         * @deprecated\n         */\n        var _createBodyPrimitive = function (render, body) {\n          var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n          primitive.clear();\n\n          // handle compound parts\n          for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n            if (!options.wireframes) {\n              primitive.beginFill(fillStyle, 1);\n              primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n              primitive.beginFill(0, 0);\n              primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n            for (var j = 1; j < part.vertices.length; j++) {\n              primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n              primitive.beginFill(0, 0);\n              if (options.wireframes) {\n                primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n              } else {\n                primitive.lineStyle(1, strokeStyleIndicator);\n              }\n              primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n              primitive.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2 - body.position.x, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2 - body.position.y);\n              primitive.endFill();\n            }\n          }\n          return primitive;\n        };\n\n        /**\n         * Gets the requested texture (a PIXI.Texture) via its path\n         * @method _getTexture\n         * @private\n         * @param {RenderPixi} render\n         * @param {string} imagePath\n         * @return {PIXI.Texture} texture\n         * @deprecated\n         */\n        var _getTexture = function (render, imagePath) {\n          var texture = render.textures[imagePath];\n          if (!texture) texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n          return texture;\n        };\n      })();\n    }, {\n      \"../body/Composite\": 2,\n      \"../core/Common\": 14,\n      \"../core/Events\": 16,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28\n    }]\n  }, {}, [30])(30);\n});","map":{"version":3,"names":["f","exports","module","define","amd","g","window","global","self","Matter","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","_dereq_","Body","Vertices","Vector","Sleeping","Render","Common","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","create","options","defaults","id","nextId","type","label","parts","plugin","angle","vertices","fromPath","position","x","y","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","velocity","angularVelocity","isSensor","isStatic","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","sprite","xScale","yScale","xOffset","yOffset","lineWidth","body","extend","_initProperties","nextGroup","isNonColliding","nextCategory","set","bounds","positionPrev","clone","anglePrev","parent","rotate","axes","update","area","mass","inertia","defaultFillStyle","choose","defaultStrokeStyle","fillStyle","strokeStyle","min","max","settings","value","property","hasOwnProperty","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","part","_original","inverseMass","inverseInertia","Infinity","moment","fromVertices","centre","translate","autoHull","slice","push","concat","clockwiseSort","hull","hullCentre","total","_totalProperties","delta","sub","rotateAbout","magnitude","Math","abs","translation","add","rotation","point","cos","sin","dx","dy","scale","scaleX","scaleY","totalArea","totalInertia","circleRadius","deltaTime","correction","deltaTimeSquared","pow","velocityPrevX","velocityPrevY","applyForce","offset","properties","mult","div","Composite","Events","isModified","bodies","constraints","composites","setModified","composite","updateParents","updateChildren","childComposite","object","objects","trigger","obj","warn","addBody","addConstraint","addComposite","constraint","remove","deep","removeBody","removeConstraint","removeComposite","compositeA","compositeB","indexOf","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","allBodies","allConstraints","allComposites","get","toString","move","rebase","recursive","World","Constraint","gravity","Contact","vertex","normalImpulse","tangentImpulse","index","Detector","SAT","Pair","collisions","broadphasePairs","engine","pairsTable","pairs","table","bodyA","bodyB","canCollide","overlaps","j","partA","k","partB","pairId","pair","previousCollision","isActive","collision","collides","collided","filterA","filterB","Grid","controller","detector","buckets","pairsList","bucketWidth","bucketHeight","grid","forceUpdate","col","row","world","bucket","bucketId","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","floor","column","pairKeys","keys","timestamp","parentA","parentB","contacts","activeContacts","separation","timeCreated","timeUpdated","supports","support","contactId","contact","depth","setActive","Pairs","_pairMaxIdleLife","list","collisionStart","collisionActive","collisionEnd","activePairIds","removeOld","indexesToRemove","pairIndex","Query","Bodies","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","rectangle","outside","result","contains","Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","solvePosition","normal","bodyBtoA","contactShare","contactCount","tempA","_temp","tempB","tempC","tempD","penetration","dot","postSolvePosition","preSolveVelocity","tangent","contactVertex","impulse","cross","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","perp","velocityPointB","relativeVelocity","normalVelocity","tangentVelocity","tangentSpeed","tangentVelocityDirection","sign","normalForce","clamp","maxFriction","oAcN","oBcN","share","contactNormalImpulse","contactTangentImpulse","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","axis","verticesB","_findSupports","verticesA","neg","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","nearestDistance","vertexToBody","bodyAPosition","distance","vertexA","vertexB","prevIndex","nextIndex","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","difference","massTotal","inertiaTotal","resistanceTotal","zero","postSolveAll","MouseConstraint","Mouse","mouse","canvas","element","mouseConstraint","on","_triggerEvents","button","mouseEvents","sourceEvents","mousemove","mousedown","mouseup","clearSourceEvents","_nextId","_seed","_nowStartTime","Date","argsStart","args","deepClone","arguments","source","prop","constructor","Object","key","values","path","begin","end","split","val","shuffle","array","random","temp","choices","isElement","HTMLElement","nodeType","nodeName","isArray","prototype","isFunction","isPlainObject","isString","now","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","Array","info","haystack","needle","map","func","mapped","topologicalSort","graph","visited","node","_topologicalSort","neighbors","neighbor","chain","funcs","_chained","lastResult","l","chainPathBefore","base","chainPathAfter","_requireGlobal","globalName","moduleName","Engine","Metrics","positionIterations","velocityIterations","constraintIterations","enableSleeping","events","timing","broadphase","renderDefaults","metrics","extended","event","_bodiesApplyGravity","_bodiesUpdate","afterCollisions","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","eventNames","callback","names","name","off","join","callbacks","newCallbacks","eventClone","Plugin","version","uses","used","use","before","after","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","pixelRatio","getAttribute","mousewheel","_getRelativeMousePosition","touches","changedTouches","preventDefault","detail","setElement","addEventListener","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","pageXOffset","undefined","scrollLeft","scrollY","pageYOffset","scrollTop","pageX","left","pageY","top","clientWidth","width","clientHeight","height","_registry","register","isPlugin","registered","pluginVersion","versionParse","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","isFor","parsed","for","versionSatisfies","plugins","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","pattern","test","identifiers","isRange","isNaN","substr","operator","prerelease","rangeParsed","rangeParts","versionParsed","versionParts","Runner","_requestAnimationFrame","_cancelAnimationFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","_frameTimeout","setTimeout","clearTimeout","fps","deltaSampleSize","counterTimestamp","frameCounter","deltaHistory","timePrev","timeScalePrev","frameRequestId","isFixed","enabled","runner","deltaMin","deltaMax","run","time","tick","stop","start","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","sleepingBody","movingBody","wasSleeping","decomp","chamfer","radius","quality","qualityMin","qualityMax","trapezoid","slope","roof","x1","x2","x3","verticesPath","circle","maxSides","sides","ceil","polygon","theta","PI","xx","yy","toFixed","vertexSets","flagInternal","removeCollinear","minimumArea","isConvex","v","z","concave","makeCCW","removeCollinearPoints","decomposed","quickDecomp","chunk","chunkVertices","coincident_max_dist","pav","pbv","da","magnitudeSquared","db","isInternal","Composites","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","mesh","crossBrace","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelBase","wheelAOffset","wheelBOffset","wheelYOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","normalise","gradient","boundsA","boundsB","vector","shift","deltaX","deltaY","Svg","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","points","lx","ly","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","sqrt","output","vectorA","vectorB","cross3","vectorC","scalar","negate","atan2","pathPattern","match","parseFloat","mean","average","signed","numerator","denominator","vertice","nextVertice","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","alpha","acos","sort","flag","upper","lower","pop","RenderPixi","background","wireframeBackground","hasBounds","wireframes","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","setPixelRatio","appendChild","loop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","viewWidth","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","endViewTransform","setTransform","currentBackground","_applyBackground","globalCompositeOperation","fillRect","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","debug","space","debugTimestamp","text","round","debugString","font","fillText","beginPath","arc","closePath","moveTo","coils","lineTo","stroke","fill","bodyShadows","distanceX","distanceY","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","globalAlpha","texture","_getTexture","drawImage","rect","corrected","normalPosX","normalPosY","bucketKeys","inspector","selected","item","data","setLineDash","selectStart","selectBounds","createElement","oncontextmenu","onselectstart","devicePixelRatio","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","renderer","container","spriteContainer","pixiOptions","transparent","view","antialias","backgroundColor","PIXI","WebGLRenderer","Container","sprites","primitives","addChild","children","removeChild","bgSprite","addChildAt","setBackground","isColor","color","Sprite","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","anchor","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage"],"sources":["C:/Users/aleja/OneDrive/Documentos/Tec/Hackathon/Yellow-Submarine-SpaceApps-2023/Yellow-Submarine-SpaceApps-2023/yellow-submarine/node_modules/matter-js/build/matter.js"],"sourcesContent":["/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Render = _dereq_('../render/Render');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 0\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                delete part._original;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = _dereq_('../core/Events');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Body = _dereq_('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"./Body\":1}],3:[function(_dereq_,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = _dereq_('./Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: { \n                min: { x: -Infinity, y: -Infinity }, \n                max: { x: Infinity, y: Infinity } \n            }\n        };\n        \n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n    \n    /**\n     * An alias for Composite.add\n     * @method add\n     * @param {world} world\n     * @param {} object\n     * @return {composite} The original world with the objects added\n     */\n\n    /**\n     * An alias for Composite.remove\n     * @method remove\n     * @param {world} world\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original world with the objects removed\n     */\n\n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.addComposite\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n    \n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(_dereq_,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(_dereq_,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = _dereq_('./SAT');\nvar Pair = _dereq_('./Pair');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        \n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(_dereq_,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = _dereq_('./Pair');\nvar Detector = _dereq_('./Detector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = _dereq_('./Contact');\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = _dereq_('./Pair');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(_dereq_,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar SAT = _dereq_('./SAT');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Bodies = _dereq_('../factory/Bodies');\nvar Vertices = _dereq_('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(_dereq_,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                                    Vector.add(bodyA.positionImpulse, \n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(_dereq_,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(_dereq_,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(_dereq_,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Mouse = _dereq_('../core/Mouse');\nvar Events = _dereq_('../core/Events');\nvar Detector = _dereq_('../collision/Detector');\nvar Constraint = _dereq_('./Constraint');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(_dereq_,module,exports){\n(function (global){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result will be high-resolution including decimal places if available.\n     * @method now\n     * @return {number} the current timestamp\n     */\n    Common.now = function() {\n        if (window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Used to require external libraries outside of the bundle.\n     * It first looks for the `globalName` on the environment's global namespace.\n     * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n     * @private\n     * @method _requireGlobal\n     * @param {string} globalName The global module name\n     * @param {string} moduleName The fallback CommonJS module name\n     * @return {} The loaded module\n     */\n    Common._requireGlobal = function(globalName, moduleName) {\n        var obj = (typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null);\n        return obj || _dereq_(moduleName);\n    };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],15:[function(_dereq_,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = _dereq_('../body/World');\nvar Sleeping = _dereq_('./Sleeping');\nvar Resolver = _dereq_('../collision/Resolver');\nvar Render = _dereq_('../render/Render');\nvar Pairs = _dereq_('../collision/Pairs');\nvar Metrics = _dereq_('./Metrics');\nvar Grid = _dereq_('../collision/Grid');\nvar Events = _dereq_('./Events');\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('./Common');\nvar Body = _dereq_('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n            \n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n        \n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(_dereq_,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(_dereq_,module,exports){\n/**\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter\n*/\n\nvar Matter = {};\n\nmodule.exports = Matter;\n\nvar Plugin = _dereq_('./Plugin');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * The library name.\n     * @property name\n     * @readOnly\n     * @type {String}\n     */\n    Matter.name = 'matter-js';\n\n    /**\n     * The library version.\n     * @property version\n     * @readOnly\n     * @type {String}\n     */\n    Matter.version = '0.14.2';\n\n    /**\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}\n     */\n    Matter.uses = [];\n\n    /**\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}\n     */\n    Matter.used = [];\n\n    /**\n     * Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n     */\n    Matter.use = function() {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.before = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.after = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n    };\n\n})();\n\n},{\"./Common\":14,\"./Plugin\":20}],18:[function(_dereq_,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],19:[function(_dereq_,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],20:[function(_dereq_,module,exports){\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var identifiers = range.split('-');\n        range = identifiers[0];\n\n        var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function(part) {\n                return Number(part);\n            });\n\n        return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n\n        if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n                if (rangeParts[0] > 0) {\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n                }\n\n                if (rangeParts[1] > 0) {\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n                }\n\n                return versionParts[2] === rangeParts[2];\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n},{\"./Common\":14}],21:[function(_dereq_,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = _dereq_('./Events');\nvar Engine = _dereq_('./Engine');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified \n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(_dereq_,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = _dereq_('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],23:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Vector = _dereq_('../geometry/Vector');\nvar decomp;\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n        }\n\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bodies = _dereq_('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n    \n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(_dereq_,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n},{}],27:[function(_dereq_,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../core/Common\":14,\"../geometry/Bounds\":26}],28:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n},{}],29:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(_dereq_,module,exports){\nvar Matter = module.exports = _dereq_('../core/Matter');\n\nMatter.Body = _dereq_('../body/Body');\nMatter.Composite = _dereq_('../body/Composite');\nMatter.World = _dereq_('../body/World');\n\nMatter.Contact = _dereq_('../collision/Contact');\nMatter.Detector = _dereq_('../collision/Detector');\nMatter.Grid = _dereq_('../collision/Grid');\nMatter.Pairs = _dereq_('../collision/Pairs');\nMatter.Pair = _dereq_('../collision/Pair');\nMatter.Query = _dereq_('../collision/Query');\nMatter.Resolver = _dereq_('../collision/Resolver');\nMatter.SAT = _dereq_('../collision/SAT');\n\nMatter.Constraint = _dereq_('../constraint/Constraint');\nMatter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n\nMatter.Common = _dereq_('../core/Common');\nMatter.Engine = _dereq_('../core/Engine');\nMatter.Events = _dereq_('../core/Events');\nMatter.Mouse = _dereq_('../core/Mouse');\nMatter.Runner = _dereq_('../core/Runner');\nMatter.Sleeping = _dereq_('../core/Sleeping');\nMatter.Plugin = _dereq_('../core/Plugin');\n\n\nMatter.Bodies = _dereq_('../factory/Bodies');\nMatter.Composites = _dereq_('../factory/Composites');\n\nMatter.Axes = _dereq_('../geometry/Axes');\nMatter.Bounds = _dereq_('../geometry/Bounds');\nMatter.Svg = _dereq_('../geometry/Svg');\nMatter.Vector = _dereq_('../geometry/Vector');\nMatter.Vertices = _dereq_('../geometry/Vertices');\n\nMatter.Render = _dereq_('../render/Render');\nMatter.RenderPixi = _dereq_('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(_dereq_,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = _dereq_('../core/Common');\nvar Composite = _dereq_('../body/Composite');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Events = _dereq_('../core/Events');\nvar Grid = _dereq_('../collision/Grid');\nvar Vector = _dereq_('../geometry/Vector');\nvar Mouse = _dereq_('../core/Mouse');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#18181d',\n                wireframeBackground: '#0f0f13',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                    0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                    grid.bucketWidth,\n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(_dereq_,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Events = _dereq_('../core/Events');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n    \n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || { \n            min: {\n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // event listeners\n        Events.on(render.engine, 'beforeUpdate', function() {\n            RenderPixi.clear(render);\n        });\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) { \n            container.removeChild(container.children[0]); \n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) { \n            spriteContainer.removeChild(spriteContainer.children[0]); \n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite); \n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n        \n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n    \n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)\n});\n"],"mappings":"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ACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEK;AACL;AACA;AACA;AACA;AACA;AACA;;QAEK;AACL;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;MAEA,CAAC,EAAE,CAAC;IAEJ,CAAC,EAAC;MAAC,gBAAgB,EAAC,EAAE;MAAC,kBAAkB,EAAC,EAAE;MAAC,kBAAkB,EAAC,EAAE;MAAC,oBAAoB,EAAC,EAAE;MAAC,oBAAoB,EAAC,EAAE;MAAC,sBAAsB,EAAC,EAAE;MAAC,kBAAkB,EAAC;IAAE,CAAC,CAAC;IAAC,CAAC,EAAC,CAAC,UAASnJ,OAAO,EAACvB,MAAM,EAACD,OAAO,EAAC;MACxM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEA,IAAI8K,SAAS,GAAG,CAAC,CAAC;MAElB7K,MAAM,CAACD,OAAO,GAAG8K,SAAS;MAE1B,IAAIC,MAAM,GAAGvJ,OAAO,CAAC,gBAAgB,CAAC;MACtC,IAAIM,MAAM,GAAGN,OAAO,CAAC,gBAAgB,CAAC;MACtC,IAAIO,MAAM,GAAGP,OAAO,CAAC,oBAAoB,CAAC;MAC1C,IAAIC,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC;MAE5B,CAAC,YAAW;QAER;AACJ;AACA;AACA;AACA;AACA;AACA;QACIsJ,SAAS,CAACzI,MAAM,GAAG,UAASC,OAAO,EAAE;UACjC,OAAOR,MAAM,CAACyD,MAAM,CAAC;YACjB/C,EAAE,EAAEV,MAAM,CAACW,MAAM,CAAC,CAAC;YACnBC,IAAI,EAAE,WAAW;YACjBuD,MAAM,EAAE,IAAI;YACZ+E,UAAU,EAAE,KAAK;YACjBC,MAAM,EAAE,EAAE;YACVC,WAAW,EAAE,EAAE;YACfC,UAAU,EAAE,EAAE;YACdxI,KAAK,EAAE,WAAW;YAClBE,MAAM,EAAE,CAAC;UACb,CAAC,EAAEP,OAAO,CAAC;QACf,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACIwI,SAAS,CAACM,WAAW,GAAG,UAASC,SAAS,EAAEL,UAAU,EAAEM,aAAa,EAAEC,cAAc,EAAE;UACnFF,SAAS,CAACL,UAAU,GAAGA,UAAU;UAEjC,IAAIM,aAAa,IAAID,SAAS,CAACpF,MAAM,EAAE;YACnC6E,SAAS,CAACM,WAAW,CAACC,SAAS,CAACpF,MAAM,EAAE+E,UAAU,EAAEM,aAAa,EAAEC,cAAc,CAAC;UACtF;UAEA,IAAIA,cAAc,EAAE;YAChB,KAAI,IAAIzK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuK,SAAS,CAACF,UAAU,CAAC5J,MAAM,EAAET,CAAC,EAAE,EAAE;cACjD,IAAI0K,cAAc,GAAGH,SAAS,CAACF,UAAU,CAACrK,CAAC,CAAC;cAC5CgK,SAAS,CAACM,WAAW,CAACI,cAAc,EAAER,UAAU,EAAEM,aAAa,EAAEC,cAAc,CAAC;YACpF;UACJ;QACJ,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;QACIT,SAAS,CAACxB,GAAG,GAAG,UAAS+B,SAAS,EAAEI,MAAM,EAAE;UACxC,IAAIC,OAAO,GAAG,EAAE,CAACjD,MAAM,CAACgD,MAAM,CAAC;UAE/BV,MAAM,CAACY,OAAO,CAACN,SAAS,EAAE,WAAW,EAAE;YAAEI,MAAM,EAAEA;UAAO,CAAC,CAAC;UAE1D,KAAK,IAAI3K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4K,OAAO,CAACnK,MAAM,EAAET,CAAC,EAAE,EAAE;YACrC,IAAI8K,GAAG,GAAGF,OAAO,CAAC5K,CAAC,CAAC;YAEpB,QAAQ8K,GAAG,CAAClJ,IAAI;cAEhB,KAAK,MAAM;gBACP;gBACA,IAAIkJ,GAAG,CAAC3F,MAAM,KAAK2F,GAAG,EAAE;kBACpB9J,MAAM,CAAC+J,IAAI,CAAC,sFAAsF,CAAC;kBACnG;gBACJ;gBAEAf,SAAS,CAACgB,OAAO,CAACT,SAAS,EAAEO,GAAG,CAAC;gBACjC;cACJ,KAAK,YAAY;gBACbd,SAAS,CAACiB,aAAa,CAACV,SAAS,EAAEO,GAAG,CAAC;gBACvC;cACJ,KAAK,WAAW;gBACZd,SAAS,CAACkB,YAAY,CAACX,SAAS,EAAEO,GAAG,CAAC;gBACtC;cACJ,KAAK,iBAAiB;gBAClBd,SAAS,CAACiB,aAAa,CAACV,SAAS,EAAEO,GAAG,CAACK,UAAU,CAAC;gBAClD;YAEJ;UACJ;UAEAlB,MAAM,CAACY,OAAO,CAACN,SAAS,EAAE,UAAU,EAAE;YAAEI,MAAM,EAAEA;UAAO,CAAC,CAAC;UAEzD,OAAOJ,SAAS;QACpB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACIP,SAAS,CAACoB,MAAM,GAAG,UAASb,SAAS,EAAEI,MAAM,EAAEU,IAAI,EAAE;UACjD,IAAIT,OAAO,GAAG,EAAE,CAACjD,MAAM,CAACgD,MAAM,CAAC;UAE/BV,MAAM,CAACY,OAAO,CAACN,SAAS,EAAE,cAAc,EAAE;YAAEI,MAAM,EAAEA;UAAO,CAAC,CAAC;UAE7D,KAAK,IAAI3K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4K,OAAO,CAACnK,MAAM,EAAET,CAAC,EAAE,EAAE;YACrC,IAAI8K,GAAG,GAAGF,OAAO,CAAC5K,CAAC,CAAC;YAEpB,QAAQ8K,GAAG,CAAClJ,IAAI;cAEhB,KAAK,MAAM;gBACPoI,SAAS,CAACsB,UAAU,CAACf,SAAS,EAAEO,GAAG,EAAEO,IAAI,CAAC;gBAC1C;cACJ,KAAK,YAAY;gBACbrB,SAAS,CAACuB,gBAAgB,CAAChB,SAAS,EAAEO,GAAG,EAAEO,IAAI,CAAC;gBAChD;cACJ,KAAK,WAAW;gBACZrB,SAAS,CAACwB,eAAe,CAACjB,SAAS,EAAEO,GAAG,EAAEO,IAAI,CAAC;gBAC/C;cACJ,KAAK,iBAAiB;gBAClBrB,SAAS,CAACuB,gBAAgB,CAAChB,SAAS,EAAEO,GAAG,CAACK,UAAU,CAAC;gBACrD;YAEJ;UACJ;UAEAlB,MAAM,CAACY,OAAO,CAACN,SAAS,EAAE,aAAa,EAAE;YAAEI,MAAM,EAAEA;UAAO,CAAC,CAAC;UAE5D,OAAOJ,SAAS;QACpB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;QACIP,SAAS,CAACkB,YAAY,GAAG,UAASO,UAAU,EAAEC,UAAU,EAAE;UACtDD,UAAU,CAACpB,UAAU,CAAC3C,IAAI,CAACgE,UAAU,CAAC;UACtCA,UAAU,CAACvG,MAAM,GAAGsG,UAAU;UAC9BzB,SAAS,CAACM,WAAW,CAACmB,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;UACpD,OAAOA,UAAU;QACrB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACIzB,SAAS,CAACwB,eAAe,GAAG,UAASC,UAAU,EAAEC,UAAU,EAAEL,IAAI,EAAE;UAC/D,IAAIlJ,QAAQ,GAAGnB,MAAM,CAAC2K,OAAO,CAACF,UAAU,CAACpB,UAAU,EAAEqB,UAAU,CAAC;UAChE,IAAIvJ,QAAQ,KAAK,CAAC,CAAC,EAAE;YACjB6H,SAAS,CAAC4B,iBAAiB,CAACH,UAAU,EAAEtJ,QAAQ,CAAC;YACjD6H,SAAS,CAACM,WAAW,CAACmB,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;UACxD;UAEA,IAAIJ,IAAI,EAAE;YACN,KAAK,IAAIrL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyL,UAAU,CAACpB,UAAU,CAAC5J,MAAM,EAAET,CAAC,EAAE,EAAC;cAClDgK,SAAS,CAACwB,eAAe,CAACC,UAAU,CAACpB,UAAU,CAACrK,CAAC,CAAC,EAAE0L,UAAU,EAAE,IAAI,CAAC;YACzE;UACJ;UAEA,OAAOD,UAAU;QACrB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;QACIzB,SAAS,CAAC4B,iBAAiB,GAAG,UAASrB,SAAS,EAAEpI,QAAQ,EAAE;UACxDoI,SAAS,CAACF,UAAU,CAACwB,MAAM,CAAC1J,QAAQ,EAAE,CAAC,CAAC;UACxC6H,SAAS,CAACM,WAAW,CAACC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;UACnD,OAAOA,SAAS;QACpB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;QACIP,SAAS,CAACgB,OAAO,GAAG,UAAST,SAAS,EAAE/F,IAAI,EAAE;UAC1C+F,SAAS,CAACJ,MAAM,CAACzC,IAAI,CAAClD,IAAI,CAAC;UAC3BwF,SAAS,CAACM,WAAW,CAACC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;UACnD,OAAOA,SAAS;QACpB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACIP,SAAS,CAACsB,UAAU,GAAG,UAASf,SAAS,EAAE/F,IAAI,EAAE6G,IAAI,EAAE;UACnD,IAAIlJ,QAAQ,GAAGnB,MAAM,CAAC2K,OAAO,CAACpB,SAAS,CAACJ,MAAM,EAAE3F,IAAI,CAAC;UACrD,IAAIrC,QAAQ,KAAK,CAAC,CAAC,EAAE;YACjB6H,SAAS,CAAC8B,YAAY,CAACvB,SAAS,EAAEpI,QAAQ,CAAC;YAC3C6H,SAAS,CAACM,WAAW,CAACC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;UACvD;UAEA,IAAIc,IAAI,EAAE;YACN,KAAK,IAAIrL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuK,SAAS,CAACF,UAAU,CAAC5J,MAAM,EAAET,CAAC,EAAE,EAAC;cACjDgK,SAAS,CAACsB,UAAU,CAACf,SAAS,CAACF,UAAU,CAACrK,CAAC,CAAC,EAAEwE,IAAI,EAAE,IAAI,CAAC;YAC7D;UACJ;UAEA,OAAO+F,SAAS;QACpB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;QACIP,SAAS,CAAC8B,YAAY,GAAG,UAASvB,SAAS,EAAEpI,QAAQ,EAAE;UACnDoI,SAAS,CAACJ,MAAM,CAAC0B,MAAM,CAAC1J,QAAQ,EAAE,CAAC,CAAC;UACpC6H,SAAS,CAACM,WAAW,CAACC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;UACnD,OAAOA,SAAS;QACpB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;QACIP,SAAS,CAACiB,aAAa,GAAG,UAASV,SAAS,EAAEY,UAAU,EAAE;UACtDZ,SAAS,CAACH,WAAW,CAAC1C,IAAI,CAACyD,UAAU,CAAC;UACtCnB,SAAS,CAACM,WAAW,CAACC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;UACnD,OAAOA,SAAS;QACpB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACIP,SAAS,CAACuB,gBAAgB,GAAG,UAAShB,SAAS,EAAEY,UAAU,EAAEE,IAAI,EAAE;UAC/D,IAAIlJ,QAAQ,GAAGnB,MAAM,CAAC2K,OAAO,CAACpB,SAAS,CAACH,WAAW,EAAEe,UAAU,CAAC;UAChE,IAAIhJ,QAAQ,KAAK,CAAC,CAAC,EAAE;YACjB6H,SAAS,CAAC+B,kBAAkB,CAACxB,SAAS,EAAEpI,QAAQ,CAAC;UACrD;UAEA,IAAIkJ,IAAI,EAAE;YACN,KAAK,IAAIrL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuK,SAAS,CAACF,UAAU,CAAC5J,MAAM,EAAET,CAAC,EAAE,EAAC;cACjDgK,SAAS,CAACuB,gBAAgB,CAAChB,SAAS,CAACF,UAAU,CAACrK,CAAC,CAAC,EAAEmL,UAAU,EAAE,IAAI,CAAC;YACzE;UACJ;UAEA,OAAOZ,SAAS;QACpB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;QACIP,SAAS,CAAC+B,kBAAkB,GAAG,UAASxB,SAAS,EAAEpI,QAAQ,EAAE;UACzDoI,SAAS,CAACH,WAAW,CAACyB,MAAM,CAAC1J,QAAQ,EAAE,CAAC,CAAC;UACzC6H,SAAS,CAACM,WAAW,CAACC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;UACnD,OAAOA,SAAS;QACpB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;QACIP,SAAS,CAACgC,KAAK,GAAG,UAASzB,SAAS,EAAE0B,UAAU,EAAEZ,IAAI,EAAE;UACpD,IAAIA,IAAI,EAAE;YACN,KAAK,IAAIrL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuK,SAAS,CAACF,UAAU,CAAC5J,MAAM,EAAET,CAAC,EAAE,EAAC;cACjDgK,SAAS,CAACgC,KAAK,CAACzB,SAAS,CAACF,UAAU,CAACrK,CAAC,CAAC,EAAEiM,UAAU,EAAE,IAAI,CAAC;YAC9D;UACJ;UAEA,IAAIA,UAAU,EAAE;YACZ1B,SAAS,CAACJ,MAAM,GAAGI,SAAS,CAACJ,MAAM,CAAC+B,MAAM,CAAC,UAAS1H,IAAI,EAAE;cAAE,OAAOA,IAAI,CAACxB,QAAQ;YAAE,CAAC,CAAC;UACxF,CAAC,MAAM;YACHuH,SAAS,CAACJ,MAAM,CAAC1J,MAAM,GAAG,CAAC;UAC/B;UAEA8J,SAAS,CAACH,WAAW,CAAC3J,MAAM,GAAG,CAAC;UAChC8J,SAAS,CAACF,UAAU,CAAC5J,MAAM,GAAG,CAAC;UAC/BuJ,SAAS,CAACM,WAAW,CAACC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;UAEnD,OAAOA,SAAS;QACpB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;QACIP,SAAS,CAACmC,SAAS,GAAG,UAAS5B,SAAS,EAAE;UACtC,IAAIJ,MAAM,GAAG,EAAE,CAACxC,MAAM,CAAC4C,SAAS,CAACJ,MAAM,CAAC;UAExC,KAAK,IAAInK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuK,SAAS,CAACF,UAAU,CAAC5J,MAAM,EAAET,CAAC,EAAE,EAChDmK,MAAM,GAAGA,MAAM,CAACxC,MAAM,CAACqC,SAAS,CAACmC,SAAS,CAAC5B,SAAS,CAACF,UAAU,CAACrK,CAAC,CAAC,CAAC,CAAC;UAExE,OAAOmK,MAAM;QACjB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;QACIH,SAAS,CAACoC,cAAc,GAAG,UAAS7B,SAAS,EAAE;UAC3C,IAAIH,WAAW,GAAG,EAAE,CAACzC,MAAM,CAAC4C,SAAS,CAACH,WAAW,CAAC;UAElD,KAAK,IAAIpK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuK,SAAS,CAACF,UAAU,CAAC5J,MAAM,EAAET,CAAC,EAAE,EAChDoK,WAAW,GAAGA,WAAW,CAACzC,MAAM,CAACqC,SAAS,CAACoC,cAAc,CAAC7B,SAAS,CAACF,UAAU,CAACrK,CAAC,CAAC,CAAC,CAAC;UAEvF,OAAOoK,WAAW;QACtB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;QACIJ,SAAS,CAACqC,aAAa,GAAG,UAAS9B,SAAS,EAAE;UAC1C,IAAIF,UAAU,GAAG,EAAE,CAAC1C,MAAM,CAAC4C,SAAS,CAACF,UAAU,CAAC;UAEhD,KAAK,IAAIrK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuK,SAAS,CAACF,UAAU,CAAC5J,MAAM,EAAET,CAAC,EAAE,EAChDqK,UAAU,GAAGA,UAAU,CAAC1C,MAAM,CAACqC,SAAS,CAACqC,aAAa,CAAC9B,SAAS,CAACF,UAAU,CAACrK,CAAC,CAAC,CAAC,CAAC;UAEpF,OAAOqK,UAAU;QACrB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;QACIL,SAAS,CAACsC,GAAG,GAAG,UAAS/B,SAAS,EAAE7I,EAAE,EAAEE,IAAI,EAAE;UAC1C,IAAIgJ,OAAO,EACPD,MAAM;UAEV,QAAQ/I,IAAI;YACZ,KAAK,MAAM;cACPgJ,OAAO,GAAGZ,SAAS,CAACmC,SAAS,CAAC5B,SAAS,CAAC;cACxC;YACJ,KAAK,YAAY;cACbK,OAAO,GAAGZ,SAAS,CAACoC,cAAc,CAAC7B,SAAS,CAAC;cAC7C;YACJ,KAAK,WAAW;cACZK,OAAO,GAAGZ,SAAS,CAACqC,aAAa,CAAC9B,SAAS,CAAC,CAAC5C,MAAM,CAAC4C,SAAS,CAAC;cAC9D;UACJ;UAEA,IAAI,CAACK,OAAO,EACR,OAAO,IAAI;UAEfD,MAAM,GAAGC,OAAO,CAACsB,MAAM,CAAC,UAASvB,MAAM,EAAE;YACrC,OAAOA,MAAM,CAACjJ,EAAE,CAAC6K,QAAQ,CAAC,CAAC,KAAK7K,EAAE,CAAC6K,QAAQ,CAAC,CAAC;UACjD,CAAC,CAAC;UAEF,OAAO5B,MAAM,CAAClK,MAAM,KAAK,CAAC,GAAG,IAAI,GAAGkK,MAAM,CAAC,CAAC,CAAC;QACjD,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;QACIX,SAAS,CAACwC,IAAI,GAAG,UAASf,UAAU,EAAEb,OAAO,EAAEc,UAAU,EAAE;UACvD1B,SAAS,CAACoB,MAAM,CAACK,UAAU,EAAEb,OAAO,CAAC;UACrCZ,SAAS,CAACxB,GAAG,CAACkD,UAAU,EAAEd,OAAO,CAAC;UAClC,OAAOa,UAAU;QACrB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;QACIzB,SAAS,CAACyC,MAAM,GAAG,UAASlC,SAAS,EAAE;UACnC,IAAIK,OAAO,GAAGZ,SAAS,CAACmC,SAAS,CAAC5B,SAAS,CAAC,CAC3B5C,MAAM,CAACqC,SAAS,CAACoC,cAAc,CAAC7B,SAAS,CAAC,CAAC,CAC3C5C,MAAM,CAACqC,SAAS,CAACqC,aAAa,CAAC9B,SAAS,CAAC,CAAC;UAE3D,KAAK,IAAIvK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4K,OAAO,CAACnK,MAAM,EAAET,CAAC,EAAE,EAAE;YACrC4K,OAAO,CAAC5K,CAAC,CAAC,CAAC0B,EAAE,GAAGV,MAAM,CAACW,MAAM,CAAC,CAAC;UACnC;UAEAqI,SAAS,CAACM,WAAW,CAACC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;UAEnD,OAAOA,SAAS;QACpB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;QACIP,SAAS,CAACzC,SAAS,GAAG,UAASgD,SAAS,EAAEhC,WAAW,EAAEmE,SAAS,EAAE;UAC9D,IAAIvC,MAAM,GAAGuC,SAAS,GAAG1C,SAAS,CAACmC,SAAS,CAAC5B,SAAS,CAAC,GAAGA,SAAS,CAACJ,MAAM;UAE1E,KAAK,IAAInK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmK,MAAM,CAAC1J,MAAM,EAAET,CAAC,EAAE,EAAE;YACpCW,IAAI,CAAC4G,SAAS,CAAC4C,MAAM,CAACnK,CAAC,CAAC,EAAEuI,WAAW,CAAC;UAC1C;UAEAyB,SAAS,CAACM,WAAW,CAACC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;UAEnD,OAAOA,SAAS;QACpB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;QACIP,SAAS,CAAC5E,MAAM,GAAG,UAASmF,SAAS,EAAE9B,QAAQ,EAAEC,KAAK,EAAEgE,SAAS,EAAE;UAC/D,IAAI/D,GAAG,GAAGN,IAAI,CAACM,GAAG,CAACF,QAAQ,CAAC;YACxBG,GAAG,GAAGP,IAAI,CAACO,GAAG,CAACH,QAAQ,CAAC;YACxB0B,MAAM,GAAGuC,SAAS,GAAG1C,SAAS,CAACmC,SAAS,CAAC5B,SAAS,CAAC,GAAGA,SAAS,CAACJ,MAAM;UAE1E,KAAK,IAAInK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmK,MAAM,CAAC1J,MAAM,EAAET,CAAC,EAAE,EAAE;YACpC,IAAIwE,IAAI,GAAG2F,MAAM,CAACnK,CAAC,CAAC;cAChB6I,EAAE,GAAGrE,IAAI,CAACrC,QAAQ,CAACC,CAAC,GAAGsG,KAAK,CAACtG,CAAC;cAC9B0G,EAAE,GAAGtE,IAAI,CAACrC,QAAQ,CAACE,CAAC,GAAGqG,KAAK,CAACrG,CAAC;YAElC1B,IAAI,CAAC+F,WAAW,CAAClC,IAAI,EAAE;cACnBpC,CAAC,EAAEsG,KAAK,CAACtG,CAAC,IAAIyG,EAAE,GAAGF,GAAG,GAAGG,EAAE,GAAGF,GAAG,CAAC;cAClCvG,CAAC,EAAEqG,KAAK,CAACrG,CAAC,IAAIwG,EAAE,GAAGD,GAAG,GAAGE,EAAE,GAAGH,GAAG;YACrC,CAAC,CAAC;YAEFhI,IAAI,CAACyE,MAAM,CAACZ,IAAI,EAAEiE,QAAQ,CAAC;UAC/B;UAEAuB,SAAS,CAACM,WAAW,CAACC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;UAEnD,OAAOA,SAAS;QACpB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACIP,SAAS,CAACjB,KAAK,GAAG,UAASwB,SAAS,EAAEvB,MAAM,EAAEC,MAAM,EAAEP,KAAK,EAAEgE,SAAS,EAAE;UACpE,IAAIvC,MAAM,GAAGuC,SAAS,GAAG1C,SAAS,CAACmC,SAAS,CAAC5B,SAAS,CAAC,GAAGA,SAAS,CAACJ,MAAM;UAE1E,KAAK,IAAInK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmK,MAAM,CAAC1J,MAAM,EAAET,CAAC,EAAE,EAAE;YACpC,IAAIwE,IAAI,GAAG2F,MAAM,CAACnK,CAAC,CAAC;cAChB6I,EAAE,GAAGrE,IAAI,CAACrC,QAAQ,CAACC,CAAC,GAAGsG,KAAK,CAACtG,CAAC;cAC9B0G,EAAE,GAAGtE,IAAI,CAACrC,QAAQ,CAACE,CAAC,GAAGqG,KAAK,CAACrG,CAAC;YAElC1B,IAAI,CAAC+F,WAAW,CAAClC,IAAI,EAAE;cACnBpC,CAAC,EAAEsG,KAAK,CAACtG,CAAC,GAAGyG,EAAE,GAAGG,MAAM;cACxB3G,CAAC,EAAEqG,KAAK,CAACrG,CAAC,GAAGyG,EAAE,GAAGG;YACtB,CAAC,CAAC;YAEFtI,IAAI,CAACoI,KAAK,CAACvE,IAAI,EAAEwE,MAAM,EAAEC,MAAM,CAAC;UACpC;UAEAe,SAAS,CAACM,WAAW,CAACC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;UAEnD,OAAOA,SAAS;QACpB,CAAC;;QAED;AACJ;AACA;AACA;AACA;AACA;QACIP,SAAS,CAACjF,MAAM,GAAG,UAASwF,SAAS,EAAE;UACnC,IAAIJ,MAAM,GAAGH,SAAS,CAACmC,SAAS,CAAC5B,SAAS,CAAC;YACvCtI,QAAQ,GAAG,EAAE;UAEjB,KAAK,IAAIjC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmK,MAAM,CAAC1J,MAAM,EAAET,CAAC,IAAI,CAAC,EAAE;YACvC,IAAIwE,IAAI,GAAG2F,MAAM,CAACnK,CAAC,CAAC;YACpBiC,QAAQ,CAACyF,IAAI,CAAClD,IAAI,CAACO,MAAM,CAACgB,GAAG,EAAEvB,IAAI,CAACO,MAAM,CAACiB,GAAG,CAAC;UACnD;UAEA,OAAO/E,MAAM,CAACM,MAAM,CAACU,QAAQ,CAAC;QAClC,CAAC;;QAED;AACJ;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI;AACJ;AACA;AACA;AACA;AACA;MAEA,CAAC,EAAE,CAAC;IAEJ,CAAC,EAAC;MAAC,gBAAgB,EAAC,EAAE;MAAC,gBAAgB,EAAC,EAAE;MAAC,oBAAoB,EAAC,EAAE;MAAC,QAAQ,EAAC;IAAC,CAAC,CAAC;IAAC,CAAC,EAAC,CAAC,UAASvB,OAAO,EAACvB,MAAM,EAACD,OAAO,EAAC;MACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEA,IAAIyN,KAAK,GAA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"},"metadata":{},"sourceType":"script","externalDependencies":[]}